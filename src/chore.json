{
	"typeof": {
		"prefix": "to",
		"body": ["typeof ${1:operand} === '${2:undefined}'"],
		"description": "typeof\n"
	},
	"typeof is undefined": {
		"prefix": "tou",
		"body": ["typeof ${1:operand} === 'undefined'"],
		"description": "Type is Undefined\n"
	},
	"typeof is function": {
		"prefix": "tof",
		"body": ["typeof ${1:operand} === 'function'"],
		"description": "Type is Function\n"
	},
	"typeof is symbol": {
		"prefix": "tosy",
		"body": ["typeof ${1:operand} === 'symbol'"],
		"description": "Type is Symbol\n"
	},
	"typeof is string": {
		"prefix": "tos",
		"body": ["typeof ${1:operand} === 'string'"],
		"description": "Type is String\n"
	},
	"typeof is number": {
		"prefix": "ton",
		"body": ["typeof ${1:operand} === 'number'"],
		"description": "Type is Number\n"
	},
	"typeof is boolean": {
		"prefix": "tob",
		"body": ["typeof ${1:operand} === 'boolean'"],
		"description": "Type is Boolean\n"
	},
	"typeof is bigint": {
		"prefix": "tobi",
		"body": ["typeof ${1:operand} === 'bigint'"],
		"description": "Type is Bigint\n"
	},
	"instanceof": {
		"prefix": "io",
		"body": ["${1:object} instanceof ${2:Constructor}"],
		"description": "instanceof\nThe `instanceof` operator tests to see if the `prototype` property of a constructor appears anywhere in the prototype chain of an object. \nthe `prototype` actually defines the type, not the constructor function."
	},
	"JSON.parse()": {
		"prefix": "jp",
		"body": ["JSON.parse(${1:obj});"],
		"description": "JSON.parse()\n"
	},
	"JSON.stringify()": {
		"prefix": "js",
		"body": ["JSON.stringify(${1:obj});"],
		"description": "JSON.stringify()\n"
	},
	"try/catch": {
		"prefix": "tc",
		"body": ["try {\n\t${1}\n} catch (${2:err}) {\n\t\n}"],
		"description": "try/catch\n"
	},
	"try/catch/finally": {
		"prefix": "tcf",
		"body": ["try {\n\t${1}\n} catch (${2:err}) {\n\t\n} finally {\n\t\n}"],
		"description": "try/catch/finally\n"
	},
	"try/finally": {
		"prefix": "tf",
		"body": ["try {\n\t${1}\n} finally {\n\t\n}"],
		"description": "try/finally\n"
	},
	"return": {
		"prefix": "r",
		"body": ["return ${1};"],
		"description": "return\n"
	},
	"return null": {
		"prefix": "rn",
		"body": ["return null;"],
		"description": "return null\n"
	},
	"return this": {
		"prefix": "rt",
		"body": ["return this;"],
		"description": "return this\n"
	},
	"return new object": {
		"prefix": "ro",
		"body": ["return {\n\t${0}\n};"],
		"description": "return new object\n"
	},
	"ternary operator": {
		"prefix": "ternary",
		"body": ["${1} ? ${2} : ${3};"],
		"description": "ternary operator\n"
	},
	"debugger": {
		"prefix": ["de", "bug"],
		"body": ["debugger;"],
		"description": "debugger\n"
	},
	"encodeURI(URI)": {
		"prefix": "eu",
		"body": ["encodeURI(${1:URI})"],
		"description": "encodeURI(URI)\nencodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two 'surrogate' characters).\nnew string representing the provided string encoded as a Uniform Resource Identifier (URI).\n"
	},
	"decodeURI(encodedURI)": {
		"prefix": "du",
		"body": ["decodeURI(${1:encodedURI})"],
		"description": "decodeURI(encodedURI)\ndecodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.\nreturn a new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).\nthrows an URIError ('malformed URI sequence') exception when encodedURI contains invalid character sequences."
	},
	"encodeURIComponent(str)": {
		"prefix": "euc",
		"body": ["encodeURIComponent(${1:str})"],
		"description": "encodeURIComponent(str)\nencodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two 'surrogate' characters).\nreturn a new string representing the provided string encoded as a Uniform Resource Identifier (URI) component."
	},
	"decodeURIComponent(encodedURI)": {
		"prefix": "duc",
		"body": ["decodeURIComponent(${1:encodedURI})"],
		"description": "decodeURIComponent(encodedURI)\ndecodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.\nthrows an URIError ('malformed URI sequence') exception when used wrongly.\n"
	}
}
