{
	"object literal": {
		"prefix": "ol",
		"body": ["{", "\t${1:key}: ${2:value},$0", "}"],
		"description": "object literal\n"
	},
	"key/value pair": {
		"prefix": "kv",
		"body": ["${1:key}: ${2:value},"],
		"description": "key/value pair\n"
	},
  "object method()": {
		"prefix": "om",
		"body": ["${1:method} (${2:params}) {", "\t${3}", "},"],
		"description": "method\n"
	},
	"object async method()": {
		"prefix": "asom",
		"body": ["async ${1:method}(${2:params}) {", "\t${3}", "},"],
		"description": "async method\n"
	},
	"Object.assign()": {
		"prefix": ["oa", "Obj.assign()"],
		"body": ["Object.assign(${1:target}, ${2:source});"],
		"description": "Object.assign(target, ...sources);\nreturn the target object.\n"
	},
	"Object.create()": {
		"prefix": ["oc", "Obj.create()"],
		"body": ["Object.create(${1:obj});"],
		"description": "Object.create(proto, [propertiesObject]);\nreturn a new object with the specified prototype object and properties.\nA TypeError exception if the propertiesObject parameter is 'null' or a non-primitive-wrapper object.\n"
	},
	"Object.defineProperty(data descriptors)": {
		"prefix": ["odp", "Obj.defineProperty()"],
		"body": [
			"Object.defineProperty(${1:dest}, '${2:propertyName}', {",
			"\t${3:value}: ${4:undefined},",
			"\t${5:configurable}: ${6:false},",
			"\t${7:enumerable}: ${8:false},",
			"\t${9:writable}: ${10:false}",
			"})"
		],
		"description": "Object.defineProperty(data descriptors)\ndata descriptors\ndefines new or modifies existing properties directly on an object, \nreturning the object.\n"
	},
	"Object.defineProperty(accessor descriptors)": {
		"prefix": ["odpa", "Obj.defineProperty()"],
		"body": [
			"Object.defineProperty(${1:dest}, '${2:propertyName}', {",
			"\tget() {",
			"\t\treturn ${3:value};",
			"\t},",
			"\tset(${4:newValue}) {",
			"\t\t${5:value} = ${4:newValue};",
			"\t},",
			"\tenumerable: ${6:false},",
			"\tconfigurable: ${7:false}",
			"})"
		],
		"description": "Object.defineProperty(accessor descriptors)\naccessor descriptors\ndefines new or modifies existing properties directly on an object, \nreturning the object.\n"
	},
	"Object.defineProperties()": {
		"prefix": ["odps", "Obj.defineProperties()"],
		"body": [
			"Object.defineProperties(${1:dest}, {",
			"\t${2:propertyName}: {",
			"\t\tconfigurable: ${3:false},",
			"\t\tenumerable: ${4:false},",
			"\t\tvalue: ${5:undefined},",
			"\t\twritable: ${6:false}",
			"\t},",
			"\t${7:propertyName}: {",
			"\t\tget() {",
			"\t\t\treturn ${8:value};",
			"\t\t},",
			"\t\tset(${9:newValue}) {",
			"\t\t\t${10:value} = ${9:newValue};",
			"\t\t},",
			"\t\tenumerable: ${11:false},",
			"\t\tconfigurable: ${12:false}",
			"\t}",
			"});"
		],
		"description": "Object.defineProperties(obj, props)\ndefines new or modifies existing properties directly on an object, \nreturning the object.\n"
	},
	"Object.freeze()": {
		"prefix": ["of", "Obj.freeze()"],
		"body": ["Object.freeze(${1:obj});"],
		"description": "Object.freeze(obj);\nreturn the same object that was passed in.\n"
	},
	"Object.fromEntries()": {
		"prefix": ["ofe", "Obj.fromEntries()"],
		"body": ["Object.fromEntries(${1:iterable});"],
		"description": "Object.fromEntries(iterable);\ntransforms a list of key-value pairs into an object.\n"
	},
	"Object.getOwnPropertyDescriptor()": {
		"prefix": ["ogopd", "Obj.getOwnPropertyDescriptor()"],
		"body": [
			"Object.getOwnPropertyDescriptor(${1:obj}, '${2:propertyName}');"
		],
		"description": "Object.getOwnPropertyDescriptor(obj, propertyName);\nreturn a property descriptor of the given property if it exists on the object, 'undefined' otherwise.\n"
	},
	"Object.getOwnPropertyDescriptors()": {
		"prefix": ["ogopds", "Obj.getOwnPropertyDescriptors()"],
		"body": ["Object.getOwnPropertyDescriptors(${1:obj});"],
		"description": "Object.getOwnPropertyDescriptors(obj);\nreturn an object containing all own property descriptors of an object. Might be an empty object, if there are no properties.\n"
	},
	"Object.getOwnPropertyNames()": {
		"prefix": ["ogopn", "Obj.getOwnPropertyNames()"],
		"body": ["Object.getOwnPropertyNames(${1:obj});"],
		"description": "Object.getOwnPropertyNames(obj);\nreturn an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.\n"
	},
	"Object.getOwnPropertySymbols()": {
		"prefix": ["ogops", "Obj.getOwnPropertySymbols()"],
		"body": ["Object.getOwnPropertySymbols(${1:obj});"],
		"description": "Object.getOwnPropertySymbols(obj);\nreturn an array of all symbol properties found directly upon a given object.\n"
	},
	"Object.getPrototypeOf()": {
		"prefix": ["ogpo", "Obj.getPrototypeOf()"],
		"body": ["Object.getPrototypeOf(${1:obj});"],
		"description": "Object.getPrototypeOf(obj);\nreturn the prototype of the given object. If there are no inherited properties, 'null' is returned.\n"
	},
	"Object.is()": {
		"prefix": ["oi", "Obj.is()"],
		"body": ["Object.is(${1:value1}, ${2:value2});"],
		"description": "Object.is(value1, value2);\ndetermines whether two values are the same value\n"
	},
	"Object.isExtensible()": {
		"prefix": ["oie", "Obj.isExtensible()"],
		"body": ["Object.isExtensible(${1:obj})"],
		"description": "Object.isExtensible(obj);\ndetermines if an object is extensible (whether it can have new properties added to it).\n"
	},
	"Object.isFrozen()": {
		"prefix": ["oif", "Obj.isFrozen()"],
		"body": ["Object.isFrozen(${1:obj})"],
		"description": "Object.isFrozen(obj);\ndetermines if an object is frozen.\n"
	},
	"Object.isSealed()": {
		"prefix": ["ois", "Obj.isSealed()"],
		"body": ["Object.isSealed(${1:obj})"],
		"description": "Object.isSealed(obj);\ndetermines if an object is sealed.\n"
	},
	"Object.preventExtensions()": {
		"prefix": ["ope", "Obj.preventExtensions()"],
		"body": ["Object.preventExtensions(${1:obj});"],
		"description": "Object.preventExtensions(obj);\nreturn the object being made non-extensible.\n"
	},
	"Object.seal()": {
		"prefix": ["os", "Obj.seal()"],
		"body": ["Object.seal(${1:obj});"],
		"description": "Object.seal(obj);\nseals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.\nreturn the object being sealed.\n"
	},
	"Object.setPrototypeOf()": {
		"prefix": ["ospo", "Obj.setPrototypeOf()"],
		"body": [
			"Object.setPrototypeOf(${1:obj}, ${2:prototype});"
		],
		"description": "Object.setPrototypeOf(obj, prototype);\nreturn the specified object.\n"
	},
	"Object.entries()": {
		"prefix": ["oe", "Obj.entries()"],
		"body": ["Object.entries(${1:obj});"],
		"description": "Object.entries(obj);\nreturn an array of a given object's own enumerable string-keyed property [key, value] pairs.\n"
	},
	"Object.keys()": {
		"prefix": ["ok", "Obj.keys()"],
		"body": ["Object.keys(${1:obj});"],
		"description": "Object.keys(obj);\nreturn an array of a given object's own property names, in the same order as we get with a normal loop.\n"
	},
	"Object.values()": {
		"prefix": ["ov", "Obj.values()"],
		"body": ["Object.values(${1:obj});"],
		"description": "Object.values(obj);\nreturn an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).\n"
	},
	"*obj.hasOwnProperty()": {
		"prefix": ["hop", "obj.hasOwnProperty()"],
		"body": ["${1:obj}.hasOwnProperty(${2:propertyName})"],
		"description": "Object.prototype.hasOwnProperty(propertyName);\nreturn a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).\n"
	},
	"*prototypeObj.isPrototypeOf()": {
		"prefix": ["ipo", "obj.isPrototypeOf()"],
		"body": [
			"${1:prototypeObj}.isPrototypeOf(${2:object})"
		],
		"description": "Object.prototype.isPrototypeOf(object);\nreturn a Boolean indicating whether the calling object lies in the prototype chain of the specified object.\nthrown a TypeError is thrown if 'prototypeObj' is 'undefined' or 'null'.\n"
	},
	"*obj.propertyIsEnumerable()": {
		"prefix": ["pie", "obj.propertyIsEnumerable()"],
		"body": [
			"${1:obj}.propertyIsEnumerable(${2:propertyName})"
		],
		"description": "Object.prototype.propertyIsEnumerable(propertyName);\nreturn a Boolean indicating whether the specified property is enumerable.\n"
	},
	"*obj.toLocaleString()": {
		"prefix": ["tls", "obj.toLocaleString()"],
		"body": ["${1:obj}.toLocaleString();"],
		"description": "Object.prototype.toLocaleString();\n"
	},
	"*obj.toString()": {
		"prefix": ["ts", "obj.toString()"],
		"body": ["${1:obj}.toString();"],
		"description": "Object.prototype.toString();\n"
	},
	"*obj.valueOf()": {
		"prefix": ["vo", "obj.valueOf()"],
		"body": ["${1:obj}.valueOf()"],
		"description": "Object.prototype.valueOf();\n returns the primitive value of a **Objects** object\n"
	}
}
