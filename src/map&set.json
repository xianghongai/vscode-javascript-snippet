{
	"let Map": {
		"prefix": "lm",
		"body": ["let ${1:resource}Map = new Map();"],
		"description": "let assignment Map\n"
	},
	"let Set": {
		"prefix": "ls",
		"body": ["let ${1:resource}Set = new Set();"],
		"description": "let assignment Set\n"
	},
	"let WeakMap": {
		"prefix": "lwm",
		"body": ["let ${1:resource}WeakMap = new WeakMap();"],
		"description": "let assignment WeakMap\n"
	},
	"let WeakSet": {
		"prefix": "lws",
		"body": ["let ${1:resource}WeakSet = new WeakSet();"],
		"description": "let assignment WeakSet\n"
	},

	"const Map": {
		"prefix": ["cm", "map"],
		"body": ["const ${1:resource}Map = new Map();"],
		"description": "const assignment Map\n"
	},
	"const Set": {
		"prefix": ["cs", "set"],
		"body": ["const ${1:resource}Set = new Set();"],
		"description": "const assignment Set\n"
	},
	"const WeakMap": {
		"prefix": ["cwm", "wm"],
		"body": ["const ${1:resource}WeakMap = new WeakMap();"],
		"description": "const assignment WeakMap\n"
	},
	"const WeakSet": {
		"prefix": ["cws", "ws"],
		"body": ["const ${1:resource}WeakSet = new WeakSet();"],
		"description": "const assignment WeakSet\n"
	},

	"Map.prototype.size": {
		"prefix": "map.size",
		"body": ["${1:map}.size"],
		"description": "The size accessor property returns the number of elements in a Map object.\n"
	},
	"Map.prototype.clear()": {
		"prefix": "map.clear()",
		"body": ["${1:map}.clear();"],
		"description": "The clear() method removes all elements from a Map object.\n"
	},
	"Map.prototype.delete()": {
		"prefix": "map.delete()",
		"body": ["${1:map}.delete(${2:key});"],
		"description": "The delete() method removes the specified element from a Map object by key.\n"
	},
	"Map.prototype.forEach()": {
		"prefix": "map.forEach()",
		"body": ["${1:map}.forEach((${2:value}, ${3:key}) => {", "\t$0", "});"],
		"description": "The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.\n"
	},
	"Map.prototype.get()": {
		"prefix": "map.get()",
		"body": ["${1:map}.get(${2:key});"],
		"description": "The get() method returns a specified element from a Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map object.\n"
	},
	"Map.prototype.has()": {
		"prefix": "map.has()",
		"body": ["${1:map}.has(${2:key})"],
		"description": "The has() method returns a boolean indicating whether an element with the specified key exists or not.\n"
	},
	"Map.prototype.set()": {
		"prefix": "map.set()",
		"body": ["${1:map}.set(${2:key}, ${3:value})"],
		"description": "The set() method adds or updates an element with a specified key and a value to a Map object.\n"
	},
	"Map.prototype.entries()": {
		"prefix": "map.entries()",
		"body": ["const ${2:iterator} = ${1:map}.entries();", "$2.next().value"],
		"description": "The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.\n"
	},
	"Map.prototype.keys()": {
		"prefix": "map.keys()",
		"body": ["const ${2:iterator} = ${1:map}.keys();", "$2.next().value"],
		"description": "The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.\n"
	},
	"Map.prototype.values()": {
		"prefix": "map.values()",
		"body": ["const ${2:iterator} = ${1:map}.values()", "$2.next().value"],
		"description": "The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order.\n"
	},
	"Map.prototype[@@iterator]()": {
		"prefix": "map.@@iterator()",
		"body": ["const ${2:iterator} = ${1:map}[Symbol.iterator]();", "$2.next().value"],
		"description": "The initial value of the @@iterator property is the same function object as the initial value of the entries method.\n"
	},
	"get Map[@@species]": {
		"prefix": ["map.@@species"],
		"body": ["class FeatureMap extends Map {", "\tstatic get [@@species]() { return Map; }", "}"],
		"description": "The Map[@@species] accessor property returns the Map constructor.\n"
	},

	"WeakMap.prototype.delete()": {
		"prefix": "weakmap.delete()",
		"body": ["${1:weakmap}.delete(${2:key})"],
		"description": "The delete() method removes the specified element from a WeakMap object.\n"
	},
	"WeakMap.prototype.get()": {
		"prefix": "weakmap.get()",
		"body": ["${1:weakmap}.get(${2:key})"],
		"description": "The get() method returns a specified element from a WeakMap object.\n"
	},
	"WeakMap.prototype.has()": {
		"prefix": "weakmap.has()",
		"body": ["${1:weakmap}.has(${2:key})"],
		"description": "The has() method returns a boolean indicating whether an element with the specified key exists in the WeakMap object or not.\n"
	},
	"WeakMap.prototype.set()": {
		"prefix": "weakmap.set()",
		"body": ["${1:weakmap}.set(${2:key}, ${3:value})"],
		"description": "The set() method adds a new element with a specified key and value to a WeakMap object.\n"
	},

	"Set.prototype.size": {
		"prefix": "set.size",
		"body": ["${1:set}.size"],
		"description": "The size accessor property returns the number of (unique) elements in a Set object.\n"
	},
	"Set.prototype.add()": {
		"prefix": "set.add()",
		"body": ["${1:set}.add(${2:value})"],
		"description": "The add() method appends a new element with a specified value to the end of a Set object.\n"
	},
	"Set.prototype.clear()": {
		"prefix": "set.clear()",
		"body": ["${1:set}.clear()"],
		"description": "The clear() method removes all elements from a Set object.\n"
	},
	"Set.prototype.delete()": {
		"prefix": "set.delete()",
		"body": ["${1:set}.delete(${2:value})"],
		"description": "The delete() method removes a specified value from a Set object, if it is in the set.\n"
	},
	"Set.prototype.forEach()": {
		"prefix": "set.forEach()",
		"body": ["${1:set}.forEach((${2:value}) => {", "\t$0", "});"],
		"description": "The forEach() method executes a provided function once for each value in the Set object, in insertion order.\n"
	},
	"Set.prototype.has()": {
		"prefix": "set.has()",
		"body": ["${1:set}.has(${2:value})"],
		"description": "The has() method returns a boolean indicating whether an element with the specified value exists in a Set object or not.\n"
	},
	"Set.prototype.entries()": {
		"prefix": "set.entries()",
		"body": ["const ${2:iterator} = ${1:set}.entries();", "$2.next().value"],
		"description": "The entries() method returns a new Iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.\n"
	},
	"Set.prototype.values()": {
		"prefix": "set.values()",
		"body": ["const ${2:iterator} = ${1:set}.values()", "$2.next().value"],
		"description": "The values() method returns a new iterator object that contains the values for each element in the Set object in insertion order.\n"
	},
	"Set.prototype[@@iterator]()": {
		"prefix": "set.@@iterator()",
		"body": ["const ${2:iterator} = ${1:set}[Symbol.iterator]();", "$2.next().value"],
		"description": "The initial value of the @@iterator property is the same function object as the initial value of the values property.\n"
	},
	"get Set[@@species]": {
		"prefix": ["set.@@species"],
		"body": ["class FeatureSet extends Set {", "\tstatic get [@@species]() { return Set; }", "}"],
		"description": "The Set[Symbol.species] accessor property returns the Set constructor.\n"
	},

	"WeakSet.prototype.add()": {
		"prefix": "weakset.add()",
		"body": ["${1:weakset}.add(${2:value})"],
		"description": "The add() method appends a new object to the end of a WeakSet object.\n"
	},
	"WeakSet.prototype.delete()": {
		"prefix": "weakset.delete()",
		"body": ["${1:weakset}.delete(${2:value})"],
		"description": "The delete() method removes the specified element from a WeakSet object.\n"
	},
	"WeakSet.prototype.has()": {
		"prefix": "weakset.has()",
		"body": ["${1:weakset}.has(${2:value})"],
		"description": "The has() method returns a boolean indicating whether an object exists in a WeakSet or not.\n"
	}
}
