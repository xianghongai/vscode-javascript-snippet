{
	"Number.EPSILON": {
		"prefix": ["ne", "Num.EPSILON"],
		"body": ["Number.EPSILON"],
		"description": "Number.EPSILON = Math.pow(2, -52);\n"
	},
	"Number.MAX_SAFE_INTEGER": {
		"prefix": ["nmasi", "Num.MAX_SAFE_INTEGER"],
		"body": ["Number.MAX_SAFE_INTEGER"],
		"description": "Number.MAX_SAFE_INTEGER = 9007199254740991; // Math.pow(2, 53) - 1;\n"
	},
	"Number.MAX_VALUE": {
		"prefix": ["nmav", "Num.MAX_VALUE"],
		"body": ["Number.MAX_VALUE"],
		"description": "The MAX_VALUE property has a value of approximately 1.79E+308, or 21024. Values larger than MAX_VALUE are represented as Infinity.\n"
	},
	"Number.MIN_SAFE_INTEGER": {
		"prefix": ["nmisi", "Num.MIN_SAFE_INTEGER"],
		"body": ["Number.MIN_SAFE_INTEGER"],
		"description": "Number.MIN_SAFE_INTEGER = -9007199254740991; // -(Math.pow(2, 53) - 1)\n"
	},
	"Number.MIN_VALUE": {
		"prefix": ["nmav", "Num.MIN_VALUE"],
		"body": ["Number.MIN_VALUE"],
		"description": "The MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent.\nMIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE ('underflow values') are converted to 0.\n"
	},
	"Number.NEGATIVE_INFINITY": {
		"prefix": ["nni", "Num.NEGATIVE_INFINITY"],
		"body": ["Number.NEGATIVE_INFINITY"],
		"description": "represents the negative Infinity value.\n"
	},
	"Number.NaN": {
		"prefix": ["nn", "Num.NaN"],
		"body": ["Number.NaN"],
		"description": "represents Not-A-Number. Equivalent of **NaN**.\n"
	},
	"Number.POSITIVE_INFINITY": {
		"prefix": ["npi", "Num.POSITIVE_INFINITY"],
		"body": ["Number.POSITIVE_INFINITY"],
		"description": "represents the positive Infinity value.\n"
	},
	"Number.isFinite()": {
		"prefix": ["nif", "Num.isFinite()"],
		"body": ["Number.isFinite(${1:value})"],
		"description": "return a Boolean indicating whether or not the given value is a finite number.\n"
	},
	"Number.isInteger()": {
		"prefix": ["nii", "Num.isInteger()"],
		"body": ["Number.isInteger(${1:value})"],
		"description": "return a Boolean indicating whether or not the given value is an integer.\n"
	},
	"Number.isNaN()": {
		"prefix": ["nin", "Num.isNaN()"],
		"body": ["Number.isNaN(${1:value})"],
		"description": "return **true** if the given value is NaN and its type is Number; otherwise, **false**.\n"
	},
	"Number.isSafeInteger()": {
		"prefix": ["nisi", "Num.isSafeInteger()"],
		"body": ["Number.isSafeInteger(${1:value})"],
		"description": "return a Boolean indicating whether or not the given value is a number that is a safe integer.\n"
	},
	"Number.parseFloat()": {
		"prefix": ["npf", "Num.parseFloat()"],
		"body": ["Number.parseFloat(${1:string})"],
		"description": "parses a string argument and returns a floating point number.\n"
	},
	"Number.parseInt()": {
		"prefix": ["npi", "Num.parseInt()"],
		"body": ["Number.parseInt(${1:string})"],
		"description": "Number.parseInt(string,[ radix])\nparses a string argument and returns an integer of the specified radix or base.\n"
	},

	"Number.prototype.toExponential()": {
		"prefix": ["nte", "num.toExponential()"],
		"body": ["number.toExponential()"],
		"description": "numObj.toExponential([fractionDigits])\nreturn a string representing the Number object in exponential notation.\n"
	},
	"Number.prototype.toFixed()": {
		"prefix": ["ntf", "num.toFixed()"],
		"body": ["number.toFixed()"],
		"description": "numObj.toFixed([digits])\nformats a number using fixed-point notation.\n"
	},
	"Number.prototype.toPrecision()": {
		"prefix": ["ntp", "num.toPrecision()"],
		"body": ["number.toPrecision()"],
		"description": "numObj.toPrecision([precision])\nreturn a string representing the Number object to the specified precision."
	}
}
