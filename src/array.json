{
	"const array": {
		"prefix": "arr",
		"body": ["const ${1:arr} = [];"],
		"description": "Create an Array\n"
	},
	"Array.length": {
		"prefix": ["arrl", "arr.length"],
		"body": ["${1:items}.length;"],
		"description": "Array.length\n"
	},
	"Array.isArray()": {
		"prefix": ["isa", "Arr.isArray()"],
		"body": ["Array.isArray(${1:value})"],
		"description": "Array.isArray(value);\nreturn 'true' if the value is an Array; otherwise, 'false'.\n"
	},
	"Array.from(arrayLike)": {
		"prefix": ["arfr", "Arr.from()"],
		"body": ["Array.from(${1:arrayLike});"],
		"description": "Array.from(arrayLike);\nreturn a new Array instance, shallow-copied Array instance from an array-like or iterable object.\n"
	},
	"Array.from(arrayLike, mapFn)": {
		"prefix": ["arfr", "Arr.from()"],
		"body": [
			"Array.from(${1:arrayLike}, (${2:item}) => {\n\t${3}\n});"
		],
		"description": "Array.from(arrayLike[, mapFn[, thisArg]]);\n"
	},
	"Array.of(elementN)": {
		"prefix": ["arof", "Arr.of()"],
		"body": ["Array.of(${1:elementN});"],
		"description": "Array.of(elementN);\nreturn a new Array instance.\n"
	},

	"Array.prototype.concat()": {
		"prefix": ["arc", "arr.concat()"],
		"body": ["${1:items}.concat(${2:valueN});"],
		"description": "let newArray = oldArray.concat([value1[, value2[, ...[, valueN]]]]);\nreturn a new array\n"
	},
	"Array.prototype.copyWithin()": {
		"prefix": ["arcw", "arr.copyWithin()"],
		"body": [
			"${1:items}.copyWithin(${2:target}, ${3:start}, ${4:end});"
		],
		"description": "array.copyWithin(target[, start[, end]]);\nreturn the modified array\n"
	},

	"Array.prototype.every()": {
		"prefix": ["arev", "arr.every()"],
		"body": [
			"${1:items}.every((${2:item}) => {\n\t${3}\n});"
		],
		"description": "array.every(callback(element[, index[, array]])[, thisArg]);\nreturn 'true' if the callback function returns a truthy value for every array element. Otherwise, 'false'.\nreturns 'true' for any condition put on an empty array\n"
	},
	"Array.prototype.fill()": {
		"prefix": ["arfill", "arr.fill()"],
		"body": [
			"${1:items}.fill(${2:value}, ${3:start}, ${4:end});"
		],
		"description": "array.fill(value[, start[, end]]);\nreturn the modified array\n"
	},
	"Array.prototype.filter()": {
		"prefix": ["arf", "filter", "arr.filter()"],
		"body": [
			"${1:items}.filter((${2:item}) => {\n\t${3}\n});"
		],
		"description": "let newArray = array.filter(callback(element[, index[, array]])[, thisArg]);\nreturn a new array\n"
	},
	"Array.prototype.find()": {
		"prefix": ["arfi", "find", "arr.find()"],
		"body": [
			"${1:items}.find((${2:item}) => {\n\t${3}\n});"
		],
		"description": "array.find(callback[, thisArg]);\nreturn the value of the first element in the array that satisfies the provided testing function. Otherwise 'undefined' is returned.\n"
	},
	"Array.prototype.findIndex()": {
		"prefix": ["arfin", "findIndex", "arr.findIndex()"],
		"body": [
			"${1:items}.findIndex((${2:item}) => {\n\t${3}\n})"
		],
		"description": "array.findIndex(callback(element[, index[, array]])[, thisArg]);\nreturn the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns '-1'.\n6th edition\n"
	},
	"Array.prototype.flat()": {
		"prefix": ["arflat", "arr.flat()"],
		"body": ["${1:items}.flat();"],
		"description": "let newArray = array.flat([depth]);\nreturn a new array\n"
	},
	"Array.prototype.flatMap()": {
		"prefix": ["arflatMap", "arr.flatMap()"],
		"body": [
			"${1:items}.flatMap((${2:value}) => ${3:value});"
		],
		"description": "let newArray = array.flatMap(function callback(currentValue[, index[, array]]) { }[, thisArg]);\nreturn a new array with each element being the result of the callback function and flattened to a depth of '1'.\n"
	},
	"Array.prototype.forEach(), arrow function": {
		"prefix": ["fe", "arr.forEach()"],
		"body": [
			"${1:items}.forEach((${2:item}) => {\n\t${3}\n});"
		],
		"description": "array.forEach(arrow function(currentValue));\n"
	},
	"Array.prototype.forEach(), index": {
		"prefix": ["fei", "arr.forEach()"],
		"body": [
			"${1:items}.forEach((${2:item}, ${3:index}) => {\n\t${4}\n});"
		],
		"description": "array.forEach(arrow function(currentValue, index));\n"
	},
	"Array.prototype.forEach()": {
		"prefix": ["fefn", "arr.forEach()"],
		"body": [
			"${1:items}.forEach(function(${2:item}) {\n\t${3}\n});"
		],
		"description": "array.forEach(function(currentValue);\n"
	},
	"Array.prototype.forEach(function(currentValue, index)": {
		"prefix": ["feifn", "arr.forEach()"],
		"body": [
			"${1:items}.forEach(function(${2:item}, ${3:index}) {\n\t${4}\n});"
		],
		"description": "array.forEach(function callback(currentValue [, index [, array]]) { }[, thisArg]);\n"
	},
	"Array.prototype.includes()": {
		"prefix": ["ari", "arr.includes()"],
		"body": ["${1:items}.includes(${2:value})"],
		"description": "array.includes(valueToFind[, fromIndex]);\nreturn a Boolean value\n"
	},
	"Array.prototype.indexOf()": {
		"prefix": ["ario", "arr.indexOf()"],
		"body": ["${1:items}.indexOf(${2:item})"],
		"description": "array.indexOf(searchElement[, fromIndex]);\nreturn the first index of the element in the array; '-1' if not found.\n"
	},
	"Array.prototype.join()": {
		"prefix": ["arj", "arr.join()"],
		"body": ["${1:items}.join(${2:separator});"],
		"description": "array.join([separator]);\nreturn a string with all array elements joined. If array.length is 0, the empty string is returned.\n"
	},
	"Array.prototype.lastIndexOf()": {
		"prefix": ["arlio", "arr.lastIndexOf()"],
		"body": ["${1:items}.lastIndexOf(${2:item})"],
		"description": "array.lastIndexOf(searchElement[, fromIndex]);\nreturn the last index of the element in the array; '-1' if not found.\n"
	},
	"Array.prototype.map()": {
		"prefix": ["map", "arr.map()"],
		"body": [
			"${1:items}.map((${2:currentValue}) => {\n\t${3}\n});"
		],
		"description": "let newArray = array.map(function callback(currentValue[, index[, array]]) { }[, thisArg]);\nreturn a new array with each element being the result of the callback function.\n"
	},
	"Array.prototype.pop()": {
		"prefix": ["arp", "arr.pop()"],
		"body": ["${1:items}.pop();"],
		"description": "array.pop();\nreturn the removed element from the array; 'undefined' if the array is empty.\n"
	},
	"Array.prototype.push()": {
		"prefix": ["arj", "arr.push()"],
		"body": ["${1:items}.push(${2:item});"],
		"description": "arr.push(element1[, ...[, elementN]]);\nreturn the new length of the array.\n"
	},
	"Array.prototype.reduce()": {
		"prefix": ["arr", "arr.reduce()"],
		"body": [
			"${1:items}.reduce((${2:accumulator}, ${3:currentValue}) => {\n\treturn ${3}\n});"
		],
		"description": "array.reduce(callback(accumulator, currentValue[, index[, array]]), [, initialValue]);\nreturn The single value that results from the reduction.\n"
	},
	"Array.prototype.reduceRight()": {
		"prefix": ["arrr", "arr.reduceRight()"],
		"body": [
			"${1:items}.reduceRight((${2:accumulator}, ${3:currentValue}) => {\n\treturn ${4}\n});"
		],
		"description": "array.reduceRight(callback(accumulator, currentValue[, index[, array]])[, initialValue]);\nreturn the value that results from the reduction.\n"
	},
	"Array.prototype.reverse()": {
		"prefix": ["arre", "arr.reverse()"],
		"body": ["${1:items}.reverse();"],
		"description": "array.reverse();\nreturn the reversed array.\n"
	},
	"Array.prototype.shift()": {
		"prefix": ["ars", "arr.shift()"],
		"body": ["${1:items}.shift();"],
		"description": "array.shift();\nreturn the removed element from the array; 'undefined' if the array is empty.\n"
	},
	"Array.prototype.slice()": {
		"prefix": ["arsl", "arr.slice()"],
		"body": [
			"${1:items}.slice(${2:beginIndex}, ${3:endIndex});"
		],
		"description": "array.slice([begin[, end]]);\n return a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.\n"
	},
	"Array.prototype.some()": {
		"prefix": ["arso", "arr.some()"],
		"body": [
			"${1:items}.some((${2:item}) => {\n\t${3}\n});"
		],
		"description": "array.some(callback(element[, index[, array]])[, thisArg]);\nreturn 'true' if the callback function returns a truthy value for at least one element in the array. Otherwise, 'false'.\nreturns false for any condition put on an empty array.\n"
	},
	"Array.prototype.sort()": {
		"prefix": ["arsor", "arr.sort()"],
		"body": [
			"${1:items}.sort((${2:firstEl}, ${3:secondEl}) => {\n\t${4}\n});"
		],
		"description": "array.sort([compareFunction(firstEl, secondEl)]);\nreturn the sorted array. Note that the array is sorted in-place, and no copy is made.\n"
	},
	"Array.prototype.splice()": {
		"prefix": ["arsp", "arr.splice()"],
		"body": [
			"${1:items}.splice(${2:startIndex}, ${3:deleteCount}${4:, ${5:item}});"
		],
		"description": "let arrDeletedItems = array.splice(start[, deleteCount[, item1[, item2[, ...]]]]);\nchanges the contents of an array by removing or replacing existing elements and/or adding new elements in-place.\nreturn an array containing the deleted elements,\nIf no elements are removed, an empty array is returned.\n"
	},
	"Array.prototype.unshift()": {
		"prefix": ["aru", "arr.unshift()"],
		"body": ["${1:items}.unshift(${2:item});"],
		"description": "array.unshift(element1[, ...[, elementN]])();\nreturn the new length of the array.\n"
	},
	"Array.prototype.entries()": {
		"prefix": ["are", "arr.entries()"],
		"body": ["${1:items}.entries();"],
		"description": "array.entries();\nreturn a new Array Iterator object that contains the key/value pairs for each index in the array.\n"
	},
	"Array.prototype.keys()": {
		"prefix": ["ark", "arr.keys()"],
		"body": ["${1:items}.keys();"],
		"description": "array.keys();\nreturns a new Array Iterator object that contains the keys for each index in the array.\n"
	},
	"Array.prototype.values()": {
		"prefix": ["arv", "arr.values()"],
		"body": ["${1:items}.values();"],
		"description": "array.values();\nreturn a new Array Iterator object that contains the values for each index in the array.\n"
	},
	"Array.prototype[@@iterator]()": {
		"prefix": ["arr.@@iterator"],
		"body": [
			"const ${2:iterator} = ${1:items}[Symbol.iterator]();",
			"$2.next().value"
		],
		"description": "array[Symbol.iterator]();\nThe initial value of the @@iterator property is the same function object as the initial value of the values() property.\n"
	},
	"get Array[@@species]": {
		"prefix": ["arr.@@species"],
		"body": [
			"class FeatureArray extends Array {",
			"\tstatic get [Symbol.species]() { return Array; }",
			"}"
		],
		"description": "Array[Symbol.species]\nThe Array[@@species] accessor property returns the Array constructor.\n"
	},
	"sequence of 0..n": {
		"prefix": "seq",
		"body": ["[...Array(${1:length}).keys()]${2}"],
		"description": "sequence of 0..n\n"
	}
}
