{
	"function named": {
		"prefix": "fn",
		"body": ["function ${1:name} (${2:param}) {\n\t${3}\n}\n"],
		"description": "function named\n"
	},
	"function anonymous": {
		"prefix": "fna",
		"body": ["function (${1:param}) {\n\t${2}\n}"],
		"description": "function anonymous\n"
	},
	"function statements(var)": {
		"prefix": "vfn",
		"body": ["var ${1:name} = function (${2:param}) {\n\t${3}\n}\n"],
		"description": "function statements(var)\n"
	},
	"function statements(let)": {
		"prefix": "lfn",
		"body": ["let ${1:name} = function (${2:param}) {\n\t${3}\n}\n"],
		"description": "function statements(let)\n"
	},
	"function statements(const)": {
		"prefix": "cfn",
		"body": ["const ${1:name} = function (${2:param}) {\n\t${3}\n}\n"],
		"description": "function statements(const)\n"
	},
	"arrow function statements(let)": {
		"prefix": ["laf"],
		"body": ["let ${1:name} = (${2:param}) => {\n\t${3}\n}\n"],
		"description": "arrow function statements(let)\n"
	},
	"arrow function expression(let)": {
		"prefix": "lafe",
		"body": ["let ${1:name} = (${2:param}) => ${3};\n"],
		"description": "arrow function expression(let)\n"
	},
	"arrow function statements(const)": {
		"prefix": ["caf"],
		"body": ["const ${1:name} = (${2:param}) => {\n\t${3}\n}\n"],
		"description": "arrow function statements(const)\n"
	},
	"arrow function expression(const)": {
		"prefix": "cafe",
		"body": ["const ${1:name} = (${2:param}) => ${3};\n"],
		"description": "arrow function expression(const)\n"
	},
	"function property": {
		"prefix": "pfn",
		"body": ["${1:name}: function(${2:param}) {\n\t${3}\n}"],
		"description": "function as a property of an object\n"
	},
	"function apply": {
		"prefix": "fnapply",
		"body": ["${1:method}.apply(${2:context}, [${3:param}]);"],
		"description": "function.apply(thisArg, [argsArray])\n"
	},
	"function call": {
		"prefix": "fncall",
		"body": ["${1:method}.call(${2:context}, ${3:param});"],
		"description": "function.call(thisArg, arg1, arg2, ...)\n"
	},
	"function bind": {
		"prefix": "fnbind",
		"body": ["${1:method}.bind(${2:this});"],
		"description": "function.bind(thisArg[, arg1[, arg2[, ...]]])\n"
	},
	"arrow function statements": {
		"prefix": ["af", "afs"],
		"body": ["(${1:param}) => {\n\t${2}\n}\n"],
		"description": "arrow function statements\n"
	},
	"arrow function expression": {
		"prefix": "afe",
		"body": ["(${1:param}) => ${2}"],
		"description": "arrow function expression\n"
	},
	"arrow function with return": {
		"prefix": "afr",
		"body": ["(${1:param}) => {\n\treturn ${2};\n}\n"],
		"description": "arrow function with return\n"
	},
	"arrow function with destructuring": {
		"prefix": "afd",
		"body": ["({${1:param}}) => ${2:statement}\n"],
		"description": "arrow function with destructuring\n"
	},
	"iife, arrow function": {
		"prefix": "iif",
		"body": [";((${1:param}) => {\n\t${3}\n})(${2})\n"],
		"description": "immediately-invoked function expression (IIFE)\n"
	},
	"iife": {
		"prefix": "iife",
		"body": [";(function (${1:param}) {\n\t${3}\n})(${2})\n"],
		"description": "immediately-invoked function expression (IIFE)\n"
	},
	"new.target": {
		"prefix": "nt",
		"body": [
			"if (typeof new.target === 'undefined') {\n\tthrow new Error('Fn() must be called with new');\n}"
		]
	}
}
