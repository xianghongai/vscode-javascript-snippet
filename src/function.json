{
  "function named":                     { "prefix": "fn",       "body": [ "function ${1:name} (${2:params}) {\n\t${3}\n}\n" ],          "description": "function named\n" },
  "function anonymous":                 { "prefix": "fna",      "body": [ "function (${1:params}) {\n\t${2}\n}" ],                      "description": "function anonymous\n" },
  "function expression(var)":           { "prefix": "vfn",      "body": [ "var ${1:name} = function (${2:params}) {\n\t${3}\n}\n" ],    "description": "function expression(var)\n" },
  "function expression(let)":           { "prefix": "lfn",      "body": [ "let ${1:name} = function (${2:params}) {\n\t${3}\n}\n" ],    "description": "function expression(let)\n" },
  "function expression(const)":         { "prefix": "cfn",      "body": [ "const ${1:name} = function (${2:params}) {\n\t${3}\n}\n" ],  "description": "function expression(const)\n" },
  "arrow function expression(let)":     { "prefix": "laf",      "body": [ "let ${1:name} = (${2:params}) => {\n\t${3}\n}\n" ],          "description": "arrow function expression(let)\n" },
  "arrow function expression(const)":   { "prefix": "caf",      "body": [ "const ${1:name} = (${2:params}) => {\n\t${3}\n}\n" ],        "description": "arrow function expression(const)\n" },
  "function property":                  { "prefix": "pfn",      "body": [ "${1:name}: function(${2:params}) {\n\t${3}\n}" ],            "description": "function as a property of an object\n" },
  "function apply":                     { "prefix": "fnapply",  "body": [ "${1:method}.apply(${2:context}, [${3:params}]);" ],          "description": "function.apply(thisArg, [argsArray])\n" },
  "function call":                      { "prefix": "fncall",   "body": [ "${1:method}.call(${2:context}, ${3:params});" ],             "description": "function.call(thisArg, arg1, arg2, ...)\n" },
  "function bind":                      { "prefix": "fnbind",   "body": [ "${1:method}.bind(${2:this});" ],                             "description": "function.bind(thisArg[, arg1[, arg2[, ...]]])\n" },
  "arrow function":                     { "prefix": "af",       "body": [ "(${1:params}) => {\n\t${2}\n}\n" ],                          "description": "arrow function" },
  "arrow function with return":         { "prefix": "afr",      "body": [ "(${1:params}) => {\n\treturn ${2};\n}\n" ],                   "description": "arrow function with return\n" },
  "arrow function with destructuring":  { "prefix": "afd",      "body": [ "({${1:params}}) => ${2:statement}\n" ],                      "description": "arrow function with destructuring\n" },
  "iife, arrow function":               { "prefix": "iif",      "body": [ ";((${1:params}) => {\n\t${3}\n})(${2})\n" ],                 "description": "immediately-invoked function expression (IIFE)\n" },
  "iife":                               { "prefix": "iife",     "body": [ ";(function (${1:params}) {\n\t${3}\n})(${2})\n" ],           "description": "immediately-invoked function expression (IIFE)\n" },
  "new.target":                         { "prefix": "nt",       "body": [ "if (typeof new.target === 'undefined') {\n\tthrow new Error('Fn() must be called with new');\n}" ]}
}