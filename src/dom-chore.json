{
	"Node.compareDocumentPosition()": {
		"prefix": ["cdp", "dom.compareDocumentPosition"],
		"body": [
			"const ${3:compareMask} = ${1:node}.compareDocumentPosition(${2:otherNode});"
		],
		"description": "Compares the position of the current node against another node in any other document.\n"
	},

	"Node.cloneNode()": {
		"prefix": ["cn", "dom.cloneNode"],
		"body": ["const ${2:newClone} = ${1:node}.cloneNode(true);"],
		"description": "Clone a Node, and optionally, all of its contents.\n"
	},

	"Node.contains()": {
		"prefix": ["con", "dom.contains"],
		"body": ["${1:node}.contains(${2:otherNode});"],
		"description": "Returns a Boolean value indicating whether or not a node is a descendant of the calling node.\n"
	},

	"Node.hasChildNodes()": {
		"prefix": ["hcn", "dom.hasChildNodes"],
		"body": ["${1:node}.hasChildNodes()"],
		"description": "The `Node.hasChildNodes()` method returns a Boolean value indicating whether the given Node has child nodes or not.\n"
	},

	"Element.matches()": {
		"prefix": ["matches", "dom.matches"],
		"body": ["${1:element}.matches('${2:selectorString}')"],
		"description": "Returns a Boolean indicating whether or not the element would be selected by the specified selector string.\n"
	}
}
