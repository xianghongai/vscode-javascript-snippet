{
	"new Promise": {
		"prefix": "p",
		"body": [
			"const ${1:promise} = new Promise((resolve, reject) => {",
			"\t${2}",
			"});",
			"",
			"${1:promise}.then(${3:result} => {",
			"\t${4}",
			"}).catch(${5:error} => {",
			"\t${6}",
			"});",
			""
		],
		"description": "Promise\n"
	},
	"Promise.all()": {
		"prefix": "pa",
		"body": [
			"Promise.all([${1:promise1}, ${2:promise2}]).then((${3:values}) => {",
			"\tconsole.log(${3});",
			"}).catch(error => {",
			"\tconsole.error(error)",
			"});"
		],
		"description": "Promise.all\n"
	},
	"Promise.any()": {
		"prefix": "pa",
		"body": [
			"Promise.any([${1:promise1}, ${2:promise2}]).then((${3:result}) => {",
			"\tconsole.log(${3});",
			"}).catch(error => {",
			"\tconsole.error(error)",
			"});"
		],
		"description": "Promise.any\n"
	},
	"Promise.allSettled()": {
		"prefix": "pas",
		"body": [
			"Promise.allSettled([${1:promise1}, ${2:promise2}]).then((${3:results}) => {",
			"\t${3}.forEach((${4:result}) => {",
			"\t\tconsole.log(${4}.status)",
			"\t})",
			"});"
		],
		"description": "Promise.allSettled\n"
	},
	"Promise.race()": {
		"prefix": "pr",
		"body": [
			"Promise.race([${1:promise1}, ${2:promise2}]).then((${3:result}) => {",
			"\tconsole.log(${3});",
			"});"
		],
		"description": "Promise.race\n"
	},
	"Promise.reject()": {
		"prefix": "prj",
		"body": ["Promise.reject(${1:reason});", ""],
		"description": "Promise.reject\n"
	},
	"Promise.resolve()": {
		"prefix": "prs",
		"body": ["Promise.resolve(${1:value});", ""],
		"description": "Promise.resolve\n"
	},
	"reject()": {
		"prefix": "rj",
		"body": ["reject(${1:err});", ""],
		"description": "reject()\n"
	},
	"resolve()": {
		"prefix": "rs",
		"body": ["resolve(${1:value});", ""],
		"description": "resolve()\n"
	},
	"promise.catch": {
		"prefix": "pc",
		"body": [
			"${1:promise}.catch(error => {",
			"\t${2}",
			"});",
			""
		],
		"description": "promise.catch\n"
	},
	"promise.finally": {
		"prefix": "pf",
		"body": [
			"${1:promise}.finally(() => {",
			"\t${2}",
			"});",
			""
		],
		"description": "promise.finally\n"
	},
	"promise.then": {
		"prefix": "pt",
		"body": [
			"${1:promise}.then(${2:result} => {",
			"\t${3}",
			"});",
			""
		],
		"description": "promise.then\n"
	},
	"promise.then.catch": {
		"prefix": "ptc",
		"body": [
			"${1:promise}.then(${2:result} => {",
			"\t${3}",
			"}).catch(${4:error} => {",
			"\t${5}",
			"});"
		],
		"description": "promise.then.catch\n"
	},
	"promise.then.catch.finally": {
		"prefix": "ptcf",
		"body": [
			"${1:promise}.then(${2:result} => {",
			"\t${3}",
			"}).catch(${4:error} => {",
			"\t${5}",
			"}).finally(() => {",
			"\t${6}",
			"});",
			""
		],
		"description": "Promise.then.catch.finally\n"
	},
	"return promise": {
		"prefix": "rp",
		"body": [
			"return new Promise((resolve, reject) => {\n\t${1}\n})"
		],
		"description": "return a new Promise\n"
	}
}
