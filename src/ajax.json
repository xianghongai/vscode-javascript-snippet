{
	"XMLHttpRequest": {
		"prefix": "xhr",
		"body": [
			"const xhr = new XMLHttpRequest();",
			"",
			"xhr.onreadystatechange = () => {",
			"\tswitch (xhr.readyState) {",
			"\t\tcase 0:",
			"\t\t\t// UNSENT, Client has been created. open() not called yet.",
			"\t\t\tconsole.log('0 UNSENT', xhr.statusText);",
			"\t\t\tbreak;",
			"\t\tcase 1:",
			"\t\t\t// OPENED, open() has been called.",
			"\t\t\tconsole.log('1 OPENED', xhr.statusText);",
			"\t\t\tbreak;",
			"\t\tcase 2:",
			"\t\t\t// HEADERS_RECEIVED, send() has been called, and headers and status are available.",
			"\t\t\tconsole.log('2 HEADERS_RECEIVED', xhr.statusText);",
			"\t\t\tbreak;",
			"\t\tcase 3:",
			"\t\t\t// LOADING, Downloading; responseText holds partial data.",
			"\t\t\tconsole.log('3 LOADING', xhr.statusText);",
			"\t\t\tconsole.log('interactive... ' + xhr.responseText.length + ' bytes.');",
			"\t\t\tbreak;",
			"\t\tcase 4:",
			"\t\t\t// DONE, The operation is complete.",
			"\t\t\tconsole.log('4 DONE', xhr.statusText);",
			"",
			"\t\t\tconst header = xhr.getResponseHeader('Content-Type');",
			"\t\t\tconst headers = xhr.getAllResponseHeaders();",
			"",
			"\t\t\tif (xhr.status == 200 || xhr.status == 304) {",
			"\t\t\t\tvar data = xhr.responseText;",
			"\t\t\t\tconsole.log('COMPLETE!');",
			"\t\t\t\tconsole.dir(data);$0",
			"\t\t\t} else {",
			"\t\t\t\tconsole.log('Failed. HttpStatus: ' + xhr.statusText);",
			"\t\t\t}",
			"\t\t\tbreak;",
			"\t}",
			"};",
			"xhr.withCredentials = true;",
			"xhr.responseType = 'json';",
			"xhr.setRequestHeader('Content-Type', 'application/json');",
			"xhr.open('GET', '/${1:server}');",
			"xhr.send(null);",
			"\n",
			"// Properties: onreadystatechange, readyState, response, responseText, responseType, responseURL, responseXML, status, statusText, timeout, upload, withCredentials",
			"// Methods: open(), abort(), send(), setRequestHeader(), overrideMimeType(), getAllResponseHeaders(), getResponseHeader(),",
			"// Events: loadstart, progress, abort, error, load, timeout, loadend",
			"// 'Content-Type', *'application/x-www-form-urlencoded', 'text/plain', 'multipart/form-data', 'application/json'",
			"\n",
			"// xhr.responseType = ''; // *'', 'arraybuffer', 'blob', 'document', 'json', 'text'",
			"// xhr.overrideMimeType('text/xml'); // 'text/plain'",
			"// request.open(method, url[, async=true[, user=null[, password=null]]])"
		],
		"description": "XMLHttpRequest"
	},
	"fetch full": {
		"prefix": "fetch",
		"body": [
			"fetch('${1:server}', {",
			"\tmethod: 'POST', // *GET, POST, PUT, DELETE, etc.",
			"\tmode: 'cors', // no-cors, cors, *same-origin",
			"\tcredentials: 'same-origin', // include, same-origin, *omit",
			"\tcache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached",
			"\tredirect: 'follow', // manual, *follow, error",
			"\treferrer: 'no-referrer', // *client, no-referrer",
			"\theaders: { Accept: 'application/json', 'Content-Type': 'application/json' },",
			"\tbody: JSON.stringify(data) // must match 'Content-Type' header",
			"})",
			"\t.then(response => {",
			"\t\t// reject on network failure or if anything prevented the request from completing.",
			"\t\t// wonâ€™t reject on HTTP error status even if the response is an HTTP 404 or 500,",
			"\t\t// it will resolve normally (with ok status set to false)",
			"\t\tif (response.status >= 200 && response.status < 300) {",
			"\t\t\treturn Promise.resolve(response);",
			"\t\t}",
			"\n",
			"\t\treturn Promise.reject(new Error(response.statusText));",
			"\t})",
			"\t.then(response => response.json()) // parses response to JSON",
			"\t.then(result => {",
			"\t\t// custom error",
			"\t})",
			"\t.catch(error => {",
			"\t\t// common error",
			"\t\treturn null;",
			"\t});"
		],
		"description": "Working with the Fetch API"
	},
	"fetch get": {
		"prefix": [
			"fetchget",
			"fg"
		],
		"body": [
			"fetch('${1:server}')",
			"\t.then(response => {",
			"\t\t// network failure, request prevented",
			"\t\tif (response.status >= 200 && response.status < 300) {",
			"\t\t\treturn Promise.resolve(response);",
			"\t\t}",
			"\n",
			"\t\treturn Promise.reject(new Error(response.statusText));",
			"\t})",
			"\t.then(response => response.json())",
			"\t.then(result => {",
			"\t\t// custom error",
			"\t})",
			"\t.catch(error => {",
			"\t\t// common error",
			"\t\treturn null;",
			"\t});"
		],
		"description": "Make a GET request"
	},
	"fetch post": {
		"prefix": [
			"fetchpost",
			"fp"
		],
		"body": [
			"fetch('${1:server}', {",
			"\tmethod: 'POST',",
			"\tcredentials: 'include',",
			"\theaders: { Accept: 'application/json', 'Content-Type': 'application/json' },",
			"\tbody: JSON.stringify(data)",
			"})",
			"\t.then(response => {",
			"\t\t// network failure, request prevented",
			"\t\tif (response.status >= 200 && response.status < 300) {",
			"\t\t\treturn Promise.resolve(response);",
			"\t\t}",
			"\n",
			"\t\treturn Promise.reject(new Error(response.statusText));",
			"\t})",
			"\t.then(response => response.json())",
			"\t.then(result => {",
			"\t\t// custom error",
			"\t})",
			"\t.catch(error => {",
			"\t\t// common error",
			"\t\treturn null;",
			"\t});"
		],
		"description": "Make a POST request"
	}
}