{"XMLHttpRequest":{"prefix":"xhr","body":["const xhr = new XMLHttpRequest();","\n","xhr.onreadystatechange = () => {","\tswitch (xhr.readyState) {","\t\tcase 0:","\t\t\t// UNSENT, Client has been created. open() not called yet.","\t\t\tconsole.log('0 UNSENT', xhr.statusText);","\t\t\tbreak;","\t\tcase 1:","\t\t\t// OPENED, open() has been called.","\t\t\tconsole.log('1 OPENED', xhr.statusText);","\t\t\tbreak;","\t\tcase 2:","\t\t\t// HEADERS_RECEIVED, send() has been called, and headers and status are available.","\t\t\tconsole.log('2 HEADERS_RECEIVED', xhr.statusText);","\t\t\tbreak;","\t\tcase 3:","\t\t\t// LOADING, Downloading; responseText holds partial data.","\t\t\tconsole.log('3 LOADING', xhr.statusText);","\t\t\tconsole.log('interactive... ' + xhr.responseText.length + ' bytes.');","\t\t\tbreak;","\t\tcase 4:","\t\t\t// DONE, The operation is complete.","\t\t\tconsole.log('4 DONE', xhr.statusText);","\n","\t\t\tconst header = xhr.getResponseHeader('Content-Type');","\t\t\tconst headers = xhr.getAllResponseHeaders();","\n","\t\t\tif (xhr.status == 200 || xhr.status == 304) {","\t\t\t\tvar data = xhr.responseText;","\t\t\t\tconsole.log('COMPLETE!');","\t\t\t\tconsole.dir(data);$0","\t\t\t} else {","\t\t\t\tconsole.log('Failed. HttpStatus: ' + xhr.statusText);","\t\t\t}","\t\t\tbreak;","\t}","};","xhr.withCredentials = true;","xhr.responseType = 'json';","xhr.setRequestHeader('Content-Type', 'application/json');","xhr.open('GET', '/${1:server}');","xhr.send(null);","\n","// Properties: onreadystatechange, readyState, response, responseText, responseType, responseURL, responseXML, status, statusText, timeout, upload, withCredentials","// Methods: open(), abort(), send(), setRequestHeader(), overrideMimeType(), getAllResponseHeaders(), getResponseHeader(),","// Events: loadstart, progress, abort, error, load, timeout, loadend","// 'Content-Type', *'application/x-www-form-urlencoded', 'text/plain', 'multipart/form-data', 'application/json'","\n","// xhr.responseType = ''; // *'', 'arraybuffer', 'blob', 'document', 'json', 'text'","// xhr.overrideMimeType('text/xml'); // 'text/plain'","// request.open(method, url[, async=true[, user=null[, password=null]]])"],"description":"XMLHttpRequest"},"fetch full":{"prefix":"fetch","body":["fetch('${1:server}', {","\tmethod: 'POST', // *GET, POST, PUT, DELETE, etc.","\tmode: 'cors', // no-cors, cors, *same-origin","\tcredentials: 'same-origin', // include, same-origin, *omit","\tcache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached","\tredirect: 'follow', // manual, *follow, error","\treferrer: 'no-referrer', // *client, no-referrer","\theaders: { Accept: 'application/json', 'Content-Type': 'application/json' },","\tbody: JSON.stringify(data) // must match 'Content-Type' header","})","\t.then(response => {","\t\t// reject on network failure or if anything prevented the request from completing.","\t\t// wonâ€™t reject on HTTP error status even if the response is an HTTP 404 or 500,","\t\t// it will resolve normally (with ok status set to false)","\t\tif (response.status >= 200 && response.status < 300) {","\t\t\treturn Promise.resolve(response);","\t\t}","\n","\t\treturn Promise.reject(new Error(response.statusText));","\t})","\t.then(response => response.json()) // parses response to JSON","\t.then(result => {","\t\t// custom error","\t})","\t.catch(error => {","\t\t// common error","\t\treturn null;","\t});"],"description":"Working with the Fetch API"},"fetch get":{"prefix":["fetchget","fg"],"body":["fetch('${1:server}')","\t.then(response => {","\t\t// network failure, request prevented","\t\tif (response.status >= 200 && response.status < 300) {","\t\t\treturn Promise.resolve(response);","\t\t}","\n","\t\treturn Promise.reject(new Error(response.statusText));","\t})","\t.then(response => response.json())","\t.then(result => {","\t\t// custom error","\t})","\t.catch(error => {","\t\t// common error","\t\treturn null;","\t});"],"description":"Make a GET request"},"fetch post":{"prefix":["fetchpost","fp"],"body":["fetch('${1:server}', {","\tmethod: 'POST',","\tcredentials: 'include',","\theaders: { Accept: 'application/json', 'Content-Type': 'application/json' },","\tbody: JSON.stringify(data)","})","\t.then(response => {","\t\t// network failure, request prevented","\t\tif (response.status >= 200 && response.status < 300) {","\t\t\treturn Promise.resolve(response);","\t\t}","\n","\t\treturn Promise.reject(new Error(response.statusText));","\t})","\t.then(response => response.json())","\t.then(result => {","\t\t// custom error","\t})","\t.catch(error => {","\t\t// common error","\t\treturn null;","\t});"],"description":"Make a POST request"},"const array":{"prefix":"ar","body":["const ${1:arr} = [];"],"description":"Create an Array\n"},"Array.length":{"prefix":"arl","body":["${1:items}.length;"],"description":"Array.length\n"},"Array.isArray()":{"prefix":"isa","body":["Array.isArray(${1:value})"],"description":"Array.isArray(value);\nreturn 'true' if the value is an Array; otherwise, 'false'.\n"},"Array.from(arrayLike)":{"prefix":"arfr","body":["Array.from(${1:arrayLike});"],"description":"Array.from(arrayLike);\nreturn a new Array instance, shallow-copied Array instance from an array-like or iterable object.\n"},"Array.from(arrayLike, mapFn)":{"prefix":"arfr","body":["Array.from(${1:arrayLike}, (${2:item}) => {\n\t${3}\n});"],"description":"Array.from(arrayLike[, mapFn[, thisArg]]);\n"},"Array.of(elementN)":{"prefix":"arof","body":["Array.of(${1:elementN});"],"description":"Array.of(elementN);\nreturn a new Array instance.\n"},"array.concat":{"prefix":"arc","body":["${1:items}.concat(${2:valueN});"],"description":"let newArray = oldArray.concat([value1[, value2[, ...[, valueN]]]]);\nreturn a new array\n"},"array.copyWithin":{"prefix":"arcw","body":["${1:items}.copyWithin(${2:target}, ${3:start}, ${4:end});"],"description":"array.copyWithin(target[, start[, end]]);\nreturn the modified array\n"},"array.every":{"prefix":"arev","body":["${1:items}.every((${2:item}) => {\n\t${3}\n});"],"description":"array.every(callback(element[, index[, array]])[, thisArg]);\nreturn 'true' if the callback function returns a truthy value for every array element. Otherwise, 'false'.\nreturns 'true' for any condition put on an empty array\n"},"array.fill":{"prefix":"arfill","body":["${1:items}.fill(${2:value}, ${3:start}, ${4:end});"],"description":"array.fill(value[, start[, end]]);\nreturn the modified array\n"},"array.filter":{"prefix":["arf","filter"],"body":["${1:items}.filter((${2:item}) => {\n\t${3}\n});"],"description":"let newArray = array.filter(callback(element[, index[, array]])[, thisArg]);\nreturn a new array\n"},"array.find":{"prefix":["arfi","find"],"body":["${1:items}.find((${2:item}) => {\n\t${3}\n});"],"description":"array.find(callback[, thisArg]);\nreturn the value of the first element in the array that satisfies the provided testing function. Otherwise 'undefined' is returned.\n"},"array.findIndex":{"prefix":["arfin","findIndex"],"body":["${1:items}.findIndex((${2:item}) => {\n\t${3}\n})"],"description":"array.findIndex(callback(element[, index[, array]])[, thisArg]);\nreturn the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns '-1'.\n6th edition\n"},"array.flat(depth)":{"prefix":"arflat","body":["${1:items}.flat();"],"description":"let newArray = array.flat([depth]);\nreturn a new array\n"},"array.flatMap(callback)":{"prefix":"arflatMap","body":["${1:items}.flatMap((${2:value}) => ${3:value});"],"description":"let newArray = array.flatMap(function callback(currentValue[, index[, array]]) { }[, thisArg]);\nreturn a new array with each element being the result of the callback function and flattened to a depth of '1'.\n"},"array.forEach((currentValue) => {})":{"prefix":"fe","body":["${1:items}.forEach((${2:item}) => {\n\t${3}\n});"],"description":"array.forEach(arrow function(currentValue));\n"},"array.forEach((currentValue, index) => {})":{"prefix":"fei","body":["${1:items}.forEach((${2:item}, ${3:index}) => {\n\t${4}\n});"],"description":"array.forEach(arrow function(currentValue, index));\n"},"array.forEach(function(currentValue)":{"prefix":"fea","body":["${1:items}.forEach(function(${2:item}) {\n\t${3}\n});"],"description":"array.forEach(function(currentValue);\n"},"array.forEach(function(currentValue, index)":{"prefix":"feai","body":["${1:items}.forEach(function(${2:item}, ${3:index}) {\n\t${4}\n});"],"description":"array.forEach(function callback(currentValue [, index [, array]]) { }[, thisArg]);\n"},"array.includes":{"prefix":"ari","body":["${1:items}.includes(${2:value})"],"description":"array.includes(valueToFind[, fromIndex]);\nreturn a Boolean value\n"},"array.indexOf":{"prefix":"ario","body":["${1:items}.indexOf(${2:item})"],"description":"array.indexOf(searchElement[, fromIndex]);\nreturn the first index of the element in the array; '-1' if not found.\n"},"array.join":{"prefix":"arj","body":["${1:items}.join(${2:separator});"],"description":"array.join([separator]);\nreturn a string with all array elements joined. If array.length is 0, the empty string is returned.\n"},"array.lastIndexOf":{"prefix":"arlio","body":["${1:items}.lastIndexOf(${2:item})"],"description":"array.lastIndexOf(searchElement[, fromIndex]);\nreturn the last index of the element in the array; '-1' if not found.\n"},"array.map":{"prefix":"map","body":["${1:items}.map((${2:currentValue}) => {\n\t${3}\n});"],"description":"let newArray = array.map(function callback(currentValue[, index[, array]]) { }[, thisArg]);\nreturn a new array with each element being the result of the callback function.\n"},"array.pop":{"prefix":"arp","body":["${1:items}.pop();"],"description":"array.pop();\nreturn the removed element from the array; 'undefined' if the array is empty.\n"},"array.push":{"prefix":"arj","body":["${1:items}.push(${2:item});"],"description":"arr.push(element1[, ...[, elementN]]);\nreturn the new length of the array.\n"},"array.reduce":{"prefix":"arr","body":["${1:items}.reduce((${2:accumulator}, ${3:currentValue}) => {\n\treturn ${3}\n});"],"description":"array.reduce(callback(accumulator, currentValue[, index[, array]]), [, initialValue]);\nreturn The single value that results from the reduction.\n"},"array.reduceRight":{"prefix":"arrr","body":["${1:items}.reduceRight((${2:accumulator}, ${3:currentValue}) => {\n\treturn ${4}\n});"],"description":"array.reduceRight(callback(accumulator, currentValue[, index[, array]])[, initialValue]);\nreturn the value that results from the reduction.\n"},"array.reverse":{"prefix":"arre","body":["${1:items}.reverse();"],"description":"array.reverse();\nreturn the reversed array.\n"},"array.shift":{"prefix":"ars","body":["${1:items}.shift();"],"description":"array.shift();\nreturn the removed element from the array; 'undefined' if the array is empty.\n"},"array.slice":{"prefix":"arsl","body":["${1:items}.slice(${2:begin}, ${3:end});"],"description":"array.slice([begin[, end]]);\n return a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.\n"},"array.some":{"prefix":"arso","body":["${1:items}.some((${2:item}) => {\n\t${3}\n});"],"description":"array.some(callback(element[, index[, array]])[, thisArg]);\nreturn 'true' if the callback function returns a truthy value for at least one element in the array. Otherwise, 'false'.\nreturns false for any condition put on an empty array.\n"},"array.sort":{"prefix":"arsor","body":["${1:items}.sort((${2:firstEl}, ${3:secondEl}) => {\n\t${4}\n});"],"description":"array.sort([compareFunction(firstEl, secondEl)]);\nreturn the sorted array. Note that the array is sorted in-place, and no copy is made.\n"},"array.splice":{"prefix":"arsp","body":["${1:items}.splice(${2:start}, ${3:deleteCount}, ${4:item});"],"description":"let arrDeletedItems = array.splice(start[, deleteCount[, item1[, item2[, ...]]]]);\nchanges the contents of an array by removing or replacing existing elements and/or adding new elements in-place.\nreturn an array containing the deleted elements,\nIf no elements are removed, an empty array is returned.\n"},"array.unshift":{"prefix":"aru","body":["${1:items}.unshift(${2:item});"],"description":"array.unshift(element1[, ...[, elementN]])();\nreturn the new length of the array.\n"},"array.entries":{"prefix":"are","body":["${1:items}.entries();"],"description":"array.entries();\nreturn a new Array Iterator object that contains the key/value pairs for each index in the array.\n"},"array.keys":{"prefix":"ark","body":["${1:items}.keys();"],"description":"array.keys();\nreturns a new Array Iterator object that contains the keys for each index in the array.\n"},"array.values":{"prefix":"arv","body":["${1:items}.values();"],"description":"array.values();\nreturn a new Array Iterator object that contains the values for each index in the array.\n"},"array[Symbol.iterator]()":{"prefix":"arsi","body":["${1:items}[Symbol.iterator]();"],"description":"array[Symbol.iterator]();\nThe initial value of the @@iterator property is the same function object as the initial value of the values() property.\n"},"sequence of 0..n":{"prefix":"seq","body":["[...Array(${1:length}).keys()]${2}"],"description":"sequence of 0..n\n"},"const awaited":{"prefix":"caw","body":["const ${1:result} = await ${2:promise};"],"description":"const assignment awaited\n"},"let awaited":{"prefix":"law","body":["let ${1:result} = await ${2:promise};"],"description":"let assignment awaited\n"},"async function named":{"prefix":"asfn","body":["async function ${1:name} (${2:params}) {\n\tconst ${3:result} = await ${4:promise};\n\treturn ${3:result};\n}\n\n${1:name}().then(${5:result} => {$6});\n"],"description":"async function named\n"},"async function anonymous":{"prefix":"asfna","body":["async function (${1:params}) {\n\t${2}\n}\n"],"description":"async function anonymous\n"},"async generator function named":{"prefix":"asgfn","body":["async function* ${1:name} (${2:params}) {\n\t${3}\n}\n"],"description":"async generator function named\n"},"async generator function anonymous":{"prefix":"asgfna","body":["async function* (${1:params}) {\n\t${2}\n}\n"],"description":"async generator function anonymous\n"},"async arrow function":{"prefix":"asaf","body":["async (${1:params}) => {\n\t${2}\n}\n"],"description":"async arrow function\n"},"await":{"prefix":"aw","body":["await ${1:promise}"],"description":"await\n"},"await Promise.all":{"prefix":"awpa","body":["await Promise.all(${1:value})\n"],"description":"await Promise.all\n"},"await Promise.all.map":{"prefix":"awpam","body":["await Promise.all(${1:array}.map((${2:value}) => {\n\t${3}\n}))\n"],"description":"await Promise.all.map\n"},"alert":{"prefix":"wa","body":["window.alert('${1:msg}');"],"description":"window.alert\n"},"confirm":{"prefix":"wc","body":["window.confirm('${1:msg}');"],"description":"window.confirm\n"},"prompt":{"prefix":"wp","body":["window.prompt('${1:title}', '${2:defaultText}');"],"description":"window.prompt\n"},"setTimeOut, arrow function":{"prefix":"st","body":["const ${1:timeout} = window.setTimeout(() => {\n\t${3}\n}, ${2:delay});\n\nwindow.clearTimeout(${1:timeout});"],"description":"setTimeOut/clearTimeout\n"},"setTimeout":{"prefix":"stfn","body":["var ${1:timeout} = window.setTimeout(function() {\n\t${3}\n}, ${2:delay});\n\nwindow.clearTimeout(${1:timeout});"],"description":"setTimeout/clearTimeout\n"},"setInterval, arrow function":{"prefix":"si","body":["const ${1:timer} = window.setInterval(() => {\n\t${3}\n}, ${2:interval});\n\nwindow.clearInterval(${1:timer});"],"description":"setInterval/clearInterval\n"},"setInterval":{"prefix":"sifn","body":["var ${1:timer} = window.setInterval(function() {\n\t${3}\n}, ${2:interval});\n\nwindow.clearInterval(${1:timer});"],"description":"setInterval/clearInterval\n"},"localStorage.setItem('key', 'value');":{"prefix":"lss","body":["localStorage.setItem('${1:key}', '${2:value}');"],"description":"localStorage.setItem('key', 'value');\n"},"localStorage.getItem('key');":{"prefix":"lsg","body":["localStorage.getItem('${1:key}');"],"description":"localStorage.getItem('key');\n"},"localStorage.removeItem('key');":{"prefix":"lsr","body":["localStorage.removeItem('${1:key}');"],"description":"localStorage.removeItem('key');\n"},"localStorage.clear();":{"prefix":"lsc","body":["localStorage.clear();"],"description":"localStorage.clear();\n"},"window.screen.availWidth":{"prefix":"wsaw","body":["window.screen.availWidth"],"description":"window.screen.availWidth;\n"},"window.screen.availHeight":{"prefix":"wsah","body":["window.screen.availHeight"],"description":"window.screen.availHeight;\n"},"window.screen.width":{"prefix":"wsw","body":["window.screen.width"],"description":"window.screen.width;\n"},"window.screen.height":{"prefix":"wsh","body":["window.screen.height"],"description":"window.screen.height;\n"},"window.location.href":{"prefix":"wlh","body":["window.location.href"],"description":"window.location.href\n"},"window.location.hostname":{"prefix":"wlhn","body":["window.location.hostname"],"description":"window.location.hostname\n"},"window.location.pathname":{"prefix":"wlp","body":["window.location.pathname"],"description":"window.location.pathname\n"},"window.location.protocol":{"prefix":"wlpr","body":["window.location.protocol"],"description":"window.location.protocol\n"},"window.location.assign()":{"prefix":"wls","body":["window.location.assign(${1:url})"],"description":"window.location.assign()\n"},"window.history.back()":{"prefix":"whb","body":["window.history.back();"],"description":"window.history.back()\n"},"window.history.forward()":{"prefix":"whf","body":["window.history.forward();"],"description":"window.history.forward()\n"},"window.navigator.language":{"prefix":"wnl","body":["window.navigator.language"],"description":"window.navigator.language\n"},"window.navigator.languages":{"prefix":"wnls","body":["window.navigator.languages"],"description":"window.navigator.languages\n"},"window.navigator.userAgent":{"prefix":"wnu","body":["window.navigator.userAgent"],"description":"window.navigator.userAgent\n"},"typeof":{"prefix":"to","body":["typeof ${1:object} === '${2:undefined}'"],"description":"typeof\n"},"instanceof":{"prefix":"io","body":["${1:object} instanceof ${2:Constructor}"],"description":"instanceof\n"},"JSON.parse()":{"prefix":"jp","body":["JSON.parse(${1:obj});"],"description":"JSON.parse()\n"},"JSON.stringify()":{"prefix":"js","body":["JSON.stringify(${1:obj});"],"description":"JSON.stringify()\n"},"try/catch":{"prefix":"tc","body":["try {\n\t${1}\n} catch (${2:err}) {\n\t\n}"],"description":"try/catch\n"},"try/catch/finally":{"prefix":"tcf","body":["try {\n\t${1}\n} catch (${2:err}) {\n\t\n} finally {\n\t\n}"],"description":"try/catch/finally\n"},"try/finally":{"prefix":"tf","body":["try {\n\t${1}\n} finally {\n\t\n}"],"description":"try/finally\n"},"return":{"prefix":"r","body":["return ${1};"],"description":"return\n"},"return null":{"prefix":"rn","body":["return null;"],"description":"return null\n"},"return this":{"prefix":"rt","body":["return this;"],"description":"return this\n"},"return new object":{"prefix":"ro","body":["return {\n\t${0}\n};"],"description":"return new object\n"},"ternary operator":{"prefix":"ternary","body":["${1} ? ${2} : ${3};"],"description":"ternary operator\n"},"debugger":{"prefix":"de","body":["debugger;"],"description":"debugger\n"},"encodeURI(URI)":{"prefix":"eu","body":["encodeURI(${1:URI})"],"description":"encodeURI(URI)\nencodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two 'surrogate' characters).\nnew string representing the provided string encoded as a Uniform Resource Identifier (URI).\n"},"decodeURI(encodedURI)":{"prefix":"du","body":["decodeURI(${1:encodedURI})"],"description":"decodeURI(encodedURI)\ndecodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.\nreturn a new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).\nthrows an URIError ('malformed URI sequence') exception when encodedURI contains invalid character sequences."},"encodeURIComponent(str)":{"prefix":"euc","body":["encodeURIComponent(${1:str})"],"description":"encodeURIComponent(str)\nencodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two 'surrogate' characters).\nreturn a new string representing the provided string encoded as a Uniform Resource Identifier (URI) component."},"decodeURIComponent(encodedURI)":{"prefix":"duc","body":["decodeURIComponent(${1:encodedURI})"],"description":"decodeURIComponent(encodedURI)\ndecodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.\nthrows an URIError ('malformed URI sequence') exception when used wrongly.\n"},"class":{"prefix":"cl","body":["class ${1:name} {\n\tconstructor (${2:params}) {\n\t\t${3}\n\t}\n\n\t}"],"description":"class\n"},"class extends":{"prefix":"cle","body":["class ${1:className} extends ${2:baseClassName} {\n\tconstructor (${3:params}) {\n\t\tsuper();\n\t\t${4}\n\t}\n}"],"description":"class extends\n"},"class static":{"prefix":"stat","body":["static ${1:methodName}(${2:params}) {\n\treturn ${3};\n}"],"description":"class static\n"},"class constructor":{"prefix":"cons","body":["constructor(${1:params}) {\n\t${2}\n}"],"description":"class constructor\n"},"get property":{"prefix":"get","body":["get ${1:propertyName} () {\n\treturn this.${2:element};\n}"],"description":"getter\n"},"set property":{"prefix":"set","body":["set ${1:propertyName} (${2:value}) {\n\tthis.${3:element} = ${2};\n}"],"description":"setter\n"},"getter and setter":{"prefix":"gs","body":["get ${1:propertyName} () {\n\treturn this.${2:element};\n}\n\nset ${1} (${3:value}) {\n\tthis.${2:element} = ${3};\n}"],"description":"getter and setter\n"},"method":{"prefix":"m","body":["${1:method} (${2:params}) {\n\t${3}\n}"],"description":"method\n"},"async method":{"prefix":"asm","body":["async ${1:method}(${2:params}) {\n\t${3}\n}"],"description":"async method\n"},"prototype constructor":{"prefix":"protoc","body":["var ${1:Constructor} = function(${2:params}) {\n\t${3}\n};"],"description":"prototypal constructor\n"},"prototype method":{"prefix":"protom","body":["${1:Constructor}.prototype.${2:method} = function (${3:params}) {\n\t${4}\n};"],"description":"prototype method\n"},"module as class (CommonJS)":{"prefix":"ec","body":["class ${1:name} {\n\tconstructor (${2:params}) {\n\t\t${3}\n\t}\n}\n\nmodule.exports = ${1:name}\n"],"description":"exports.member (CommonJS)\n"},"exports.member (CommonJS)":{"prefix":"em","body":["exports.${1:member} = ${2:value}"],"description":"exports.member (CommonJS)\n"},"module.exports (CommonJS)":{"prefix":"me","body":["module.exports = ${1:name}"],"description":"module.exports (CommonJS)\n"},"require (CommonJS)":{"prefix":"rq","body":["require('${1:module}')"],"description":"require (CommonJS)\n"},"require assignment (CommonJS)":{"prefix":"crq","body":["const ${1:module} = require('${1:module}');"],"description":"require assignment (CommonJS)\n"},"console.dir":{"prefix":"cd","body":["console.dir($1);"],"description":"console.dir\n"},"console.error":{"prefix":"ce","body":["console.error($1);"],"description":"console.error\n"},"console.error labeled":{"prefix":"celb","body":["console.error('${1}: %o', ${1});"],"description":"console.error labeled\n"},"console.info":{"prefix":"ci","body":["console.info($1);"],"description":"console.info\n"},"console.log":{"prefix":"clg","body":["console.log($1);"],"description":"console.log\n"},"console.log labeled":{"prefix":"clgl","body":["console.log('${1}: %o', ${1});"],"description":"console.log labeled\n"},"console.warn":{"prefix":"cw","body":["console.warn($1);"],"description":"console.warn\n"},"console.warn labeled":{"prefix":"cwl","body":["console.warn('${1}: %o', ${1});"],"description":"console.warn labeled\n"},"console.assert":{"prefix":"ca","body":["console.assert(${1:assertion}, ${2:object});"],"description":"console.assert\n"},"console.clear":{"prefix":"cc","body":["console.clear();"],"description":"console.clear\n"},"console.count":{"prefix":"cco","body":["console.count(${1:label});"],"description":"console.count\n"},"console.group":{"prefix":"cg","body":["console.group('${1:label}');"],"description":"console.group\n"},"console.groupEnd":{"prefix":"cge","body":["console.groupEnd();"],"description":"console.groupEnd\n"},"console.table":{"prefix":"ct","body":["console.table(${1:object});"],"description":"console.table\n"},"console.trace":{"prefix":"ctr","body":["console.trace(${1:object});"],"description":"console.trace\n"},"use strict":{"prefix":"usm","body":["'use strict';"],"description":"use strict mode\n"},"const":{"prefix":"c","body":["const ${1:name} = ${2:value};"],"description":"const assignment\n"},"const destructing object":{"prefix":"cdo","body":["const {${2}} = ${1};"],"description":"const assignment destructuring\n"},"const destructing array":{"prefix":"cda","body":["const [${2}] = ${1};"],"description":"const assignment destructuring\n"},"let":{"prefix":"l","body":["let ${1:name} = ${2:value};"],"description":"let assignment\n"},"let destructing object":{"prefix":"ldo","body":["let {${2}} = ${1};"],"description":"let assignment destructuring\n"},"let destructing array":{"prefix":"lda","body":["let [${2}] = ${1};"],"description":"let assignment destructuring\n"},"var":{"prefix":"v","body":["var ${1:name} = ${2:value};"],"description":"var assignment\n"},"var destructing object":{"prefix":"vdo","body":["var {${2}} = ${1};"],"description":"var destructuring assignment\n"},"var destructing array":{"prefix":"vda","body":["var [${2}] = ${1};"],"description":"var destructuring assignment\n"},"destructuring parameter":{"prefix":"dp","body":["{${0}}: ${1:parameter}"],"description":"destructuring parameter\n"},"property object":{"prefix":"opo","body":["${1:property}: { ${2:property} },$0"],"description":"option object property\n"},"property array":{"prefix":"opa","body":["${1:property}: [ ${2:property} ],$0"],"description":"option array property\n"},"Document.createDocumentFragment":{"prefix":["cdf","dom.createDocumentFragment"],"body":["${1:document}.createDocumentFragment();$2"],"description":"Creates a new document fragment.\n"},"Document.createElement":{"prefix":["cel","dom.createElement"],"body":["${1:document}.createElement(${2:elem});"],"description":"Creates a new element with the given tag name.\n"},"Document.createTextNode":{"prefix":["ctn","dom.createTextNode"],"body":["${1:document}.createTextNode(${2:data});"],"description":"Creates a text node.\n"},"Document.getElementById":{"prefix":["gi","dom.getElementById"],"body":["${1:document}.getElementById('${2:id}');"],"description":"Finding HTML elements by id.\n"},"Document.getElementsByClassName":{"prefix":["gc","dom.getElementsByClassName"],"body":["${1:document}.getElementsByClassName('${2:className}');"],"description":"Finding HTML elements by class name.\n"},"Document.getElementsByTagName":{"prefix":["gt","dom.getElementsByTagName"],"body":["${1:document}.getElementsByTagName('${2:tagName}');"],"description":"Finding HTML elements by tag name.\n"},"Document.querySelector":{"prefix":["qs","dom.querySelector"],"body":["${1:document}.querySelector('${2:selector}');"],"description":"querySelector\n"},"Document.querySelectorAll":{"prefix":["qsa","dom.querySelectorAll"],"body":["${1:document}.querySelectorAll('${2:selector}');"],"description":"querySelectorAll\n"},"Node.childNodes":{"prefix":["cn","dom.childNodes"],"body":["const ${2:nodeList} = ${1:node}.childNodes;"],"description":"Returns a live NodeList containing all the children of this node. \n"},"Node.parentElement":{"prefix":["pe","dom.parentElement"],"body":["const ${2:parentElement} = ${1:node}.parentElement;"],"description":"Returns an Element that is the parent of this node. If the node has no parent, or if that parent is not an Element, this property returns null. \n"},"Node.parentNode":{"prefix":["pn","dom.parentNode"],"body":["const ${2:parentNode} = ${1:node}.parentNode;"],"description":"Returns a Node that is the parent of this node. \n"},"Node.firstChild":{"prefix":["fc","dom.firstChild"],"body":["const ${2:childNode} = ${1:node}.firstChild;"],"description":"Returns a Node representing the first direct child node of the node, or null if the node has no child.\n"},"Node.lastChild":{"prefix":["lc","dom.lastChild"],"body":["const ${2:childNode} = ${1:node}.lastChild;"],"description":"Returns a Node representing the last direct child node of the node, or null if the node has no child.\n"},"Node.previousSibling":{"prefix":["ps","dom.previousSibling"],"body":["const ${2:previousNode} = ${1:node}.previousSibling;"],"description":"Returns a Node representing the previous node in the tree, or null if there isn't such node.\n"},"Node.nextSibling":{"prefix":["ns","dom.nextSibling"],"body":["const ${2:nextNode} = ${1:node}.nextSibling;"],"description":"Returns a Node representing the next node in the tree, or null if there isn't such node.\n"},"Node.textContent":{"prefix":["tco","dom.textContent"],"body":["${1:element}.textContent = '${2:content}';"],"description":"Returns / Sets the textual content of an element and all its descendants.\n"},"Element.previousElementSibling":{"prefix":["pes","dom.previousElementSibling"],"body":["const ${2:prevNode} = ${1:NonDocumentTypeChildNode}.previousElementSibling;"],"description":"Returns the Element immediately prior to this node in its parent's children list, or null if there is no Element in the list prior to this node.\n"},"Element.nextElementSibling":{"prefix":["nes","dom.nextElementSibling"],"body":["const ${2:nextNode} = ${1:NonDocumentTypeChildNode}.nextElementSibling;"],"description":"Returns the Element immediately following this node in its parent's children list, or null if there is no Element in the list following this node.\n"},"Element.closest()":{"prefix":["closest","dom.closest"],"body":["const ${1:closestElement} = ${2:targetElement}.closest('${3:selectorString}');"],"description":"Returns the Element which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.\n"},"Node.insertBefore()":{"prefix":["ib","dom.insertBefore"],"body":["${1:node}.insertBefore(${2:newNode}, ${3:referenceNode});"],"description":"insertBefore\n"},"Node.appendChild()":{"prefix":["ac","dom.appendChild"],"body":["${1:node}.appendChild(${2:element});"],"description":"Adds the specified childNode argument as the last child to the current node.\n"},"Node.cloneNode()":{"prefix":["cn","dom.cloneNode"],"body":["const ${2:newClone} = ${1:node}.cloneNode(true);"],"description":"Clone a Node, and optionally, all of its contents.\n"},"Node.getRootNode()":{"prefix":["dom.getRootNode"],"body":["const ${2:root} = ${1:node}.getRootNode(true);"],"description":"The getRootNode() method of the Node interface returns the context object's root, which optionally includes the shadow root if it is available.\n"},"Node.compareDocumentPosition()":{"prefix":["cdp","dom.compareDocumentPosition"],"body":["const ${3:compareMask} = ${1:node}.compareDocumentPosition(${2:otherNode});"],"description":"Compares the position of the current node against another node in any other document.\n"},"Node.contains()":{"prefix":["con","dom.contains"],"body":["${1:node}.contains(${2:otherNode});"],"description":"Returns a Boolean value indicating whether or not a node is a descendant of the calling node.\n"},"Node.removeChild()":{"prefix":["rmc","dom.removeChild"],"body":["${1:node}.removeChild(${2:child});"],"description":"removeChild\n"},"Node.replaceChild()":{"prefix":["rpc","dom.replaceChild"],"body":["${1:parentNode}.replaceChild(${2:newChild}, ${3:oldChild});"],"description":"replaceChild\n"},"Node.hasChildNodes()":{"prefix":["hcn","dom.hasChildNodes"],"body":["${1:node}.hasChildNodes()"],"description":"hasChildNodes\n"},"parentNode.firstElementChild":{"prefix":["fec","dom.firstElementChild"],"body":["const ${2:element} = ${1:parentNode}.firstElementChild;"],"description":"Returns the first node which is both a child of this ParentNode and is also an Element, or null if there is none.\n"},"parentNode.lastElementChild":{"prefix":["lec","dom.lastElementChild"],"body":["const ${2:element} = ${1:parentNode}.lastElementChild;"],"description":"Returns the last node which is both a child of this ParentNode and is an Element, or null if there is none.\n"},"parentNode.childElementCount":{"prefix":["cec","dom.childElementCount"],"body":["const ${2:count} = ${1:parentNode}.childElementCount;"],"description":"Returns the number of children of this ParentNode which are elements.\n"},"parentNode.children":{"prefix":["children","dom.children"],"body":["const ${2:children} = ${1:parentNode}.children;"],"description":"Returns a live HTMLCollection containing all of the Element objects that are children of this ParentNode.\n"},"parentNode.append()":{"prefix":["append","dom.append"],"body":["${1:parentNode}.append(${2:Nodes/DOMStrings});"],"description":"Inserts a set of Node objects or DOMString objects after the last child of the ParentNode. \n"},"parentNode.prepend()":{"prefix":["prepend","dom.prepend"],"body":["${1:parentNode}.prepend(${2:Nodes/DOMStrings});"],"description":"Inserts a set of Node objects or DOMString objects before the first child of the ParentNode. \n"},"ChildNode.before()":{"prefix":["before","dom.before"],"body":["${1:childNode}.before(${2:Nodes/DOMStrings});"],"description":"Inserts a set of Node or DOMString objects in the children list of this ChildNode's parent,just before this ChildNode. \n"},"ChildNode.after()":{"prefix":["after","dom.after"],"body":["${1:childNode}.after(${2:Nodes/DOMStrings});"],"description":"Inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just after this ChildNode. \n"},"ChildNode.remove()":{"prefix":["remove","dom.remove"],"body":["${1:childNode}.remove();"],"description":"Removes this ChildNode from the children list of its parent.\n"},"ChildNode.replaceWith()":{"prefix":["rw","dom.replaceWith"],"body":["${1:childNode}.replaceWith(${2:Node/DOMString});"],"description":"Replaces this ChildNode in the children list of its parent with a set of Node or DOMString objects.\n"},"Element.insertAdjacentHTML('beforebegin', 'DOMString')":{"prefix":["before","dom.before.html"],"body":["${1:element}.insertAdjacentHTML('beforebegin', ${2:'DOMString'});"],"description":"Before the element itself.\n"},"Element.insertAdjacentHTML('afterend', 'DOMString')":{"prefix":["after","dom.after.html"],"body":["${1:element}.insertAdjacentHTML('afterend', ${2:'DOMString'});"],"description":"After the element itself.\n"},"Element.insertAdjacentHTML('afterbegin', 'DOMString')":{"prefix":["prepend","dom.prepend.html"],"body":["${1:element}.insertAdjacentHTML('afterbegin', ${2:'DOMString'});"],"description":"Just inside the element, before its first child.\n"},"Element.insertAdjacentHTML('beforeend', 'DOMString')":{"prefix":["append","dom.append.html"],"body":["${1:element}.insertAdjacentHTML('beforeend', ${2:'DOMString'});"],"description":"Just inside the element, after its last child.\n"},"Element.insertAdjacentElement('beforebegin', element)":{"prefix":["before","dom.before.element"],"body":["${1:element}.insertAdjacentElement('beforebegin', ${2:element});"],"description":"Before the element itself.\n"},"Element.insertAdjacentElement('afterend', element)":{"prefix":["after","dom.after.element"],"body":["${1:element}.insertAdjacentElement('afterend', ${2:element});"],"description":"After the element itself.\n"},"Element.insertAdjacentElement('afterbegin', element)":{"prefix":["prepend","dom.prepend.element"],"body":["${1:element}.insertAdjacentElement('afterbegin', ${2:element});"],"description":"Just inside the element, before its first child.\n"},"Element.insertAdjacentElement('beforeend', element)":{"prefix":["append","dom.append.element"],"body":["${1:element}.insertAdjacentElement('beforeend', ${2:element});"],"description":"Just inside the element, after its last child.\n"},"Element.insertAdjacentText('beforebegin', value)":{"prefix":["before","dom.before.text"],"body":["${1:element}.insertAdjacentText('beforebegin', ${2:value});"],"description":"Before the element itself.\n"},"Element.insertAdjacentText('afterend', value)":{"prefix":["after","dom.after.text"],"body":["${1:element}.insertAdjacentText('afterend', ${2:value});"],"description":"After the element itself.\n"},"Element.insertAdjacentText('afterbegin', value)":{"prefix":["prepend","dom.prepend.text"],"body":["${1:element}.insertAdjacentText('afterbegin', ${2:value});"],"description":"Just inside the element, before its first child.\n"},"Element.insertAdjacentText('beforeend', value)":{"prefix":["append","dom.append.text"],"body":["${1:element}.insertAdjacentText('beforeend', ${2:value});"],"description":"Just inside the element, after its last child.\n"},"Element.getClientRects()":{"prefix":["gcr","dom.getClientRects"],"body":["const ${3:rectCollection} = ${1:element}.getClientRects();"],"description":"The getClientRects() method of the Element interface returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.\n"},"Element.getBoundingClientRect()":{"prefix":["gbcr","dom.getBoundingClientRect"],"body":["const ${3:domRect} = ${1:element}.getBoundingClientRect();"],"description":"The `Element.getBoundingClientRect()` method returns the size of an element and its position relative to the viewport.\n"},"Element.setAttribute()":{"prefix":["sa","dom.setAttribute"],"body":["${1:element}.setAttribute('${2:attrName}', '${3:value}');"],"description":"Sets the value of a named attribute of the current node.\n"},"Element.getAttribute()":{"prefix":["ga","dom.getAttribute"],"body":["const ${3:attribute} = ${1:element}.getAttribute('${2:attrName}');"],"description":"Retrieves the value of the named attribute from the current node and returns it as an Object.\n"},"Element.hasAttribute()":{"prefix":["ha","dom.hasAttribute"],"body":["${1:element}.hasAttribute('${2:attrName}')"],"description":"Returns a Boolean indicating if the element has the specified attribute or not.\n"},"Element.removeAttribute()":{"prefix":["ra","dom.removeAttribute"],"body":["${1:element}.removeAttribute('${2:attrName}');"],"description":"Removes the named attribute from the current node.\n"},"Element.toggleAttribute()":{"prefix":["ta","dom.toggleAttribute"],"body":["${1:element}.toggleAttribute('${2:attrName}');"],"description":"Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.\n"},"Element.matches()":{"prefix":["matches","dom.matches"],"body":["${1:element}.matches('${2:selectorString}')"],"description":"Returns a Boolean indicating whether or not the element would be selected by the specified selector string.\n"},"Element.innerHTML":{"prefix":["ih","dom.innerHTML"],"body":["${1:element}.innerHTML = ${2:'DOMString'};"],"description":"The innerHTML property sets or returns the HTML content (inner HTML) of an element.\n"},"Element.outerHTML":{"prefix":["oh","dom.outerHTML"],"body":["${1:element}.outerHTML = ${2:'DOMString'};"],"description":"The outerHTML property sets or returns the HTML element and all it's content, including the start tag, it's attributes, and the end tag.\n"},"HTMLElement.innerText":{"prefix":["it","dom.innerText"],"body":["${1:element}.innerText = ${2:'renderText'};"],"description":"The innerText property sets or returns the text content of the specified node, and all its descendants.\n"},"Element.classList.add()":{"prefix":["cla","dom.classList.add"],"body":["${1:element}.classList.add('${2:className}');"],"description":"Element.classList.add\n"},"Element.classList.contains()":{"prefix":["clc","dom.classList.contains"],"body":["${1:element}.classList.contains('${2:className}');"],"description":"Element.classList.contains\n"},"Element.classList.remove()":{"prefix":["clr","dom.classList.remove"],"body":["${1:element}.classList.remove('${2:className}');"],"description":"Element.classList.remove\n"},"Element.classList.toggle()":{"prefix":["clt","dom.classList.toggle"],"body":["${1:element}.classList.toggle('${2:className}');"],"description":"Element.classList.toggle\n"},"Element.scroll()":{"prefix":["scroll","dom.scroll"],"body":["${1:element}.scroll({top: ${2:top}, left: ${3:left}, behavior: 'smooth'});"],"description":"The scroll() method of the Element interface scrolls the element to a particular set of coordinates inside a given element.\n"},"Element.scrollBy()":{"prefix":["scrollBy","dom.scrollBy"],"body":["${1:element}.scrollBy({top: ${2:top}, left: ${3:left}, behavior: 'smooth'});"],"description":"The scrollBy() method of the Element interface scrolls an element by the given amount.\n"},"Element.scrollTo()":{"prefix":["scrollTo","dom.scrollTo"],"body":["${1:element}.scrollTo({top: ${2:top}, left: ${3:left}, behavior: 'smooth'});"],"description":"The scrollTo() method of the Element interface scrolls to a particular set of coordinates inside a given element.\n"},"Element.scrollIntoView()":{"prefix":["scrollIntoView","dom.scrollIntoView"],"body":["${1:element}.scrollIntoView({behavior: 'smooth'});"],"description":"The Element interface's scrollIntoView() method scrolls the element's parent container such that the element on which scrollIntoView() is called is visible to the user\n"},"Element.clientWidth":{"prefix":["clientWidth","dom.clientWidth"],"body":["${1:element}.clientWidth"],"description":"The Element.clientWidth property is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels. It includes padding but excludes borders, margins, and vertical scrollbars (if present).\n"},"Element.clientHeight":{"prefix":["clientHeight","dom.clientHeight"],"body":["${1:element}.clientHeight"],"description":"The Element.clientHeight read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels. It includes padding but excludes borders, margins, and horizontal scrollbars (if present).\n"},"Element.clientLeft":{"prefix":["clientLeft","dom.clientLeft"],"body":["${1:element}.clientLeft"],"description":"The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is rightâ€“toâ€“left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.\n"},"Element.clientTop":{"prefix":["clientTop","dom.clientTop"],"body":["${1:element}.clientTop"],"description":"The width of the top border of an element in pixels. It is a read-only, integer property of element.\n"},"Element.scrollWidth":{"prefix":["scrollWidth","dom.scrollWidth"],"body":["${1:element}.scrollWidth"],"description":"The Element.scrollWidth read-only property is a measurement of the width of an element's content, including content not visible on the screen due to overflow.\n"},"Element.scrollHeight":{"prefix":["scrollHeight","dom.scrollHeight"],"body":["${1:element}.scrollHeight"],"description":"The Element.scrollHeight read-only property is a measurement of the height of an element's content, including content not visible on the screen due to overflow.\n"},"Element.scrollLeft":{"prefix":["scrollLeft","dom.scrollLeft"],"body":["${1:element}.scrollLeft"],"description":"The Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled from its left edge.\n"},"Element.scrollTop":{"prefix":["scrollTop","dom.scrollTop"],"body":["${1:element}.scrollTop"],"description":"The Element.scrollTop property gets or sets the number of pixels that an element's content is scrolled vertically.\n"},"HTMLElement.offsetWidth":{"prefix":["offsetWidth","dom.offsetWidth"],"body":["${1:HTMLElement}.offsetWidth"],"description":"The HTMLElement.offsetWidth read-only property returns the layout width of an element as an integer.\n"},"HTMLElement.offsetHeight":{"prefix":["offsetHeight","dom.offsetHeight"],"body":["${1:HTMLElement}.offsetHeight"],"description":"The HTMLElement.offsetHeight read-only property returns the height of an element, including vertical padding and borders, as an integer.\n"},"HTMLElement.offsetTop":{"prefix":["offsetTop","dom.offsetTop"],"body":["${1:HTMLElement}.offsetTop"],"description":"The HTMLElement.offsetTop read-only property returns the distance of the current element relative to the top of the offsetParent node.\n"},"HTMLElement.offsetLeft":{"prefix":["offsetLeft","dom.offsetLeft"],"body":["${1:HTMLElement}.offsetLeft"],"description":"The HTMLElement.offsetLeft read-only property returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.\n"},"HTMLElement.offsetParent":{"prefix":["offsetParent","dom.offsetParent"],"body":["${1:HTMLElement}.offsetParent"],"description":"The HTMLElement.offsetParent read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element. If there is no positioned ancestor element, the nearest ancestor td, th, table will be returned, or the body if there are no ancestor table elements either.\n"},"throw new Error":{"prefix":["tn"],"body":["throw new Error(${1:'Something bad happened.'});"],"description":"throw new Error('message')\n"},"throw new EvalError":{"prefix":["tne"],"body":["throw new EvalError(${1:\"The doesn't evaluate.\"});"],"description":"throw new EvalError('message')\n"},"throw new RangeError":{"prefix":["tnr"],"body":["throw new RangeError(${1:\"Sorry, you just don't have the range.\"});"],"description":"throw new RangeError('message')\n"},"throw new ReferenceError":{"prefix":["tnre"],"body":["throw new ReferenceError(${1:\"You didn't cite your references properly.\"});"],"description":"throw new ReferenceError('message')\n"},"throw new SyntaxError":{"prefix":["tns"],"body":["throw new SyntaxError(${1:\"I don't like your syntax.\"});"],"description":"throw new SyntaxError('message')\n"},"throw new TypeError":{"prefix":["tnt"],"body":["throw new TypeError(${1:'What type of variable do you take me for?'});"],"description":"throw new TypeError('message')\n"},"throw new URIError":{"prefix":["tnu"],"body":["throw new URIError(${1:'Uri, is that you?'});"],"description":"throw new URIError('message')\n"},"addEventListener":{"prefix":["ael","dom.addEventListener()"],"body":["${1:document}.addEventListener('${2:type}', ${3:listener});\n"],"description":"EventTarget.addEventListener()\n"},"removeEventListener":{"prefix":["rel","dom.removeEventListener()"],"body":["${1:document}.removeEventListener('${2:type}', ${3:listener});\n"],"description":"EventTarget.removeEventListener()\n"},"addEventListener arrow function":{"prefix":["aela","dom.addEventListener()"],"body":["${1:document}.addEventListener('${2:type}', (${3:event}) => {\n\t${4}\n});\n"],"description":"addEventListener, arrow function\n"},"dispatchEvent":{"prefix":["dev","dom.dispatchEvent()"],"body":["const ${3:cancelled} = !${1:target}.dispatchEvent(${2:event});\n"],"description":"Dispatches an Event at the specified EventTarget\n"},"event cancel default and propagation":{"prefix":["eps"],"body":["event.preventDefault();\nevent.stopPropagation();\nreturn false;"],"description":"event.preventDefault(); event.stopPropagation()\n"},"event preventDefault":{"prefix":["epd"],"body":["event.preventDefault();"],"description":"event preventDefault\n"},"event stopPropagation":{"prefix":["esp"],"body":["event.stopPropagation();"],"description":"event stopPropagation\n"},"click":{"prefix":"click","body":["document.addEventListener('click', () => {","\t${1}","});",""],"description":"click"},"keydown":{"prefix":"keydown","body":["document.addEventListener('keydown', event => {","\tif (event.ctrlKey && event.which === 72) {","\t\t${1}","\t}","});",""],"description":"keydown \n"},"load":{"prefix":"load","body":["window.addEventListener('load', () => {","\t${1}","});",""],"description":"page is fully loaded \n should be used only to detect a fully-loaded page. \n"},"ready":{"prefix":"ready","body":["window.addEventListener('DOMContentLoaded', () => {","\t${1}","});",""],"description":"DOM fully loaded and parsed. \n The DOMContentLoaded event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading. \n"},"function named":{"prefix":"fn","body":["function ${1:name} (${2:params}) {\n\t${3}\n}\n"],"description":"function named\n"},"function anonymous":{"prefix":"fna","body":["function (${1:params}) {\n\t${2}\n}"],"description":"function anonymous\n"},"function expression(var)":{"prefix":"vfn","body":["var ${1:name} = function (${2:params}) {\n\t${3}\n}\n"],"description":"function expression(var)\n"},"function expression(let)":{"prefix":"lfn","body":["let ${1:name} = function (${2:params}) {\n\t${3}\n}\n"],"description":"function expression(let)\n"},"function expression(const)":{"prefix":"cfn","body":["const ${1:name} = function (${2:params}) {\n\t${3}\n}\n"],"description":"function expression(const)\n"},"arrow function expression(let)":{"prefix":"laf","body":["let ${1:name} = (${2:params}) => {\n\t${3}\n}\n"],"description":"arrow function expression(let)\n"},"arrow function expression(const)":{"prefix":"caf","body":["const ${1:name} = (${2:params}) => {\n\t${3}\n}\n"],"description":"arrow function expression(const)\n"},"function property":{"prefix":"fnp","body":["${1:name}: function(${2:params}) {\n\t${3}\n}"],"description":"function as a property of an object\n"},"function apply":{"prefix":"fnapply","body":["${1:method}.apply(${2:context}, [${3:params}]);"],"description":"function.apply(thisArg, [argsArray])\n"},"function call":{"prefix":"fncall","body":["${1:method}.call(${2:context}, ${3:params});"],"description":"function.call(thisArg, arg1, arg2, ...)\n"},"function bind":{"prefix":"fnbind","body":["${1:method}.bind(${2:this});"],"description":"function.bind(thisArg[, arg1[, arg2[, ...]]])\n"},"arrow function":{"prefix":"af","body":["(${1:params}) => {\n\t${2}\n}\n"],"description":"arrow function"},"arrow function with return":{"prefix":"afr","body":["(${1:params}) => {\n\treturn ${2};\n}\n"],"description":"arrow function with return\n"},"arrow function with destructuring":{"prefix":"afd","body":["({${1:params}}) => ${2:statement}\n"],"description":"arrow function with destructuring\n"},"iife, arrow function":{"prefix":"iif","body":[";((${1:params}) => {\n\t${3}\n})(${2})\n"],"description":"immediately-invoked function expression (IIFE)\n"},"iife":{"prefix":"iife","body":[";(function (${1:params}) {\n\t${3}\n})(${2})\n"],"description":"immediately-invoked function expression (IIFE)\n"},"new.target":{"prefix":"nt","body":["if (typeof new.target === 'undefined') {\n\tthrow new Error('Fn() must be called with new');\n}"]},"const yielded":{"prefix":"cy","body":["const ${1:name} = yield ${2:value};"],"description":"const assignment yielded\n"},"let yielded":{"prefix":"ly","body":["let ${1:name} = yield ${2:value};"],"description":"let assignment yielded\n"},"generator function":{"prefix":"gf","body":["function* ${1:name}(${2:params}) {\n\t${3:yield} ;\n}\n"],"description":"Creates generator function\n"},"yield":{"prefix":"y","body":["yield ${1:expression};"],"description":"The yield keyword is used to pause and resume a generator function (function* or legacy generator function).\n"},"yield*":{"prefix":"yg","body":["yield* ${1:expression};"],"description":"The yield* expression is used to delegate to another generator or iterable object."},"let Map":{"prefix":"lm","body":["let ${1:resource}Map = new Map();"],"description":"let assignment Map"},"let Set":{"prefix":"ls","body":["let ${1:resource}Set = new Set();"],"description":"let assignment Set"},"let WeakMap":{"prefix":"lwm","body":["let ${1:resource}WeakMap = new WeakMap();"],"description":"let assignment WeakMap"},"let WeakSet":{"prefix":"lws","body":["let ${1:resource}WeakSet = new WeakSet();"],"description":"let assignment WeakSet"},"const Map":{"prefix":["cm","ma"],"body":["const ${1:resource}Map = new Map();"],"description":"const assignment Map"},"const Set":{"prefix":["cs","se"],"body":["const ${1:resource}Set = new Set();"],"description":"const assignment Set"},"const WeakMap":{"prefix":["cwm","wm"],"body":["const ${1:resource}WeakMap = new WeakMap();"],"description":"const assignment WeakMap"},"const WeakSet":{"prefix":["cws","ws"],"body":["const ${1:resource}WeakSet = new WeakSet();"],"description":"const assignment WeakSet"},"Math.random":{"prefix":"mr","body":["Math.random()"],"description":"The Math.random() function returns a floating-point, pseudo-random number in the range 0â€“1 (inclusive of 0, but not 1) with approximately uniform distribution over that range."},"Math.round":{"prefix":"mro","body":["Math.round()"],"description":"The Math.round() function returns the value of a number rounded to the nearest integer."},"Math.floor":{"prefix":"mf","body":["Math.floor()"],"description":"The Math.floor() function returns the largest integer less than or equal to a given number."},"Math.ceil":{"prefix":"mc","body":["Math.ceil()"],"description":"The Math.ceil() function always rounds a number up to the next largest whole number or integer."},"Math.trunc":{"prefix":"mtr","body":["Math.trunc()"],"description":"The Math.trunc() function returns the integer part of a number by removing any fractional digits."},"import individual features":{"prefix":"im","body":["import { ${2:moduleName} } from '${1:module}';"],"description":"Import individual features\n"},"import default export":{"prefix":"imd","body":["import ${2:moduleName} from '${1:module}';"],"description":"Import default export\n"},"import renamed exports":{"prefix":"imas","body":["import { ${2:originalName} as ${3:alias} } from '${1:module}';"],"description":"Import renamed exports\n"},"import all module as alias":{"prefix":"imall","body":["import * as ${2:alias} from '${1:module}';"],"description":"Import all of a module's exports as a module object\n"},"import without module name":{"prefix":"imn","body":["import '${1:module}';"],"description":"Import a module for side effects only\n"},"export":{"prefix":"ex","body":["export {${1:nameN}};"],"description":"*export list\n"},"export renaming":{"prefix":"exas","body":["export {${1:variable} as ${2:name}};"],"description":"*renaming exports as\n"},"export let":{"prefix":"exl","body":["export let ${1:name} = ${2:value};"],"description":"*exporting individual features(let)\n"},"export const":{"prefix":"exc","body":["export const ${1:name} = ${2:value};"],"description":"exporting individual features(const)\n"},"export function":{"prefix":"exfn","body":["export function ${1:name} (){\n\t${2}\n}"],"description":"exporting individual features(function)\n"},"export named arrow function":{"prefix":"exafn","body":["export const ${1:name} = (${2:params}) => {\n\t$3\n};"],"description":"export named arrow function\n"},"export default":{"prefix":"exd","body":["export default ${1:expression};"],"description":"*export default\n"},"export as default":{"prefix":"exdas","body":["export {${1:name} as default};"],"description":"export as default\n"},"export class":{"prefix":"exdc","body":["export default class ${1:className} {\n\tconstructor (${2:params}) {\n\t\t${3}\n\t}\n}\n"],"description":"export class\n"},"export class extends":{"prefix":"exdce","body":["export default class ${1:className} extends ${2:baseClassName} {\n\tconstructor (${3:params}) {\n\t\tsuper();\n\t\t${4}\n\t}\n}"],"description":"export class extends\n"},"export default arrow function":{"prefix":"exdaf","body":["export default (${1:params}) => {\n\t${2}\n}\n"],"description":"export default arrow function\n"},"export default function":{"prefix":"exdfn","body":["export default function ${1:name} (${2:params}) {\n\t${3}\n}\n"],"description":"export default function\n"},"export from":{"prefix":"exfr","body":["export {${1:default}} from ${2:otherModule};"],"description":"*aggregating modules, export from\n"},"export all from other module":{"prefix":"exallo","body":["export * from ${1:otherModule};"],"description":"export all from other module\n"},"Number.EPSILON":{"prefix":"ne","body":["Number.EPSILON"],"description":"Number.EPSILON = Math.pow(2, -52);\n"},"Number.MAX_SAFE_INTEGER":{"prefix":"nmasi","body":["Number.MAX_SAFE_INTEGER"],"description":"Number.MAX_SAFE_INTEGER = 9007199254740991; // Math.pow(2, 53) - 1;\n"},"Number.MAX_VALUE":{"prefix":"nmav","body":["Number.MAX_VALUE"],"description":"The MAX_VALUE property has a value of approximately 1.79E+308, or 21024. Values larger than MAX_VALUE are represented as Infinity.\n"},"Number.MIN_SAFE_INTEGER":{"prefix":"nmisi","body":["Number.MIN_SAFE_INTEGER"],"description":"Number.MIN_SAFE_INTEGER = -9007199254740991; // -(Math.pow(2, 53) - 1)\n"},"Number.MIN_VALUE":{"prefix":"nmav","body":["Number.MIN_VALUE"],"description":"The MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent.\nMIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE ('underflow values') are converted to 0.\n"},"Number.NEGATIVE_INFINITY":{"prefix":"nni","body":["Number.NEGATIVE_INFINITY"],"description":"represents the negative Infinity value.\n"},"Number.NaN":{"prefix":"nn","body":["Number.NaN"],"description":"represents Not-A-Number. Equivalent of **NaN**.\n"},"Number.POSITIVE_INFINITY":{"prefix":"npi","body":["Number.POSITIVE_INFINITY"],"description":"represents the positive Infinity value.\n"},"Number.isFinite()":{"prefix":"nif","body":["Number.isFinite(${1:value})"],"description":"return a Boolean indicating whether or not the given value is a finite number.\n"},"Number.isInteger()":{"prefix":"nii","body":["Number.isInteger(${1:value})"],"description":"return a Boolean indicating whether or not the given value is an integer.\n"},"Number.isNaN()":{"prefix":"nin","body":["Number.isNaN(${1:value})"],"description":"return **true** if the given value is NaN and its type is Number; otherwise, **false**.\n"},"Number.isSafeInteger()":{"prefix":"nisi","body":["Number.isSafeInteger(${1:value})"],"description":"return a Boolean indicating whether or not the given value is a number that is a safe integer.\n"},"Number.parseFloat()":{"prefix":"npf","body":["Number.parseFloat(${1:string})"],"description":"parses a string argument and returns a floating point number.\n"},"Number.parseInt()":{"prefix":"npi","body":["Number.parseInt(${1:string})"],"description":"Number.parseInt(string,[ radix])\nparses a string argument and returns an integer of the specified radix or base.\n"},"number.toExponential()":{"prefix":"nte","body":["number.toExponential()"],"description":"numObj.toExponential([fractionDigits])\nreturn a string representing the Number object in exponential notation.\n"},"number.toFixed()":{"prefix":"ntf","body":["number.toFixed()"],"description":"numObj.toFixed([digits])\nformats a number using fixed-point notation.\n"},"number.toPrecision()":{"prefix":"ntp","body":["number.toPrecision()"],"description":"numObj.toPrecision([precision])\nreturn a string representing the Number object to the specified precision."},"object literal":{"prefix":"ol","body":["{\n\t${1:key}: ${2:value},$0\n}"],"description":"object literal\n"},"key/value pair":{"prefix":"kv","body":["${1:key}: ${2:value},"],"description":"key/value pair\n"},"Object.assign":{"prefix":"oa","body":["Object.assign(${1:target}, ${2:source});"],"description":"Object.assign(target, ...sources);\nreturn the target object.\n"},"Object.create":{"prefix":"oc","body":["Object.create(${1:obj});"],"description":"Object.create(proto, [propertiesObject]);\nreturn a new object with the specified prototype object and properties.\nA TypeError exception if the propertiesObject parameter is 'null' or a non-primitive-wrapper object.\n"},"Object.defineProperty(data descriptors)":{"prefix":"odp","body":["Object.defineProperty(${1:dest}, '${2:propertyName}', {\n\t${3:value}: ${4:undefined},\n\t${5:configurable}: ${6:false},\n\t${7:enumerable}: ${8:false},\n\t${9:writable}: ${10:false}\n})"],"description":"Object.defineProperties(obj, props)\ndata descriptors\ndefines new or modifies existing properties directly on an object, \nreturning the object.\n"},"Object.defineProperty(accessor descriptors)":{"prefix":"odpa","body":["Object.defineProperty(${1:dest}, '${2:propertyName}', {\n\tget() {\n\t\treturn ${3:value};\n\t},\n\tset(${4:newValue}) {\n\t\t${5:value} = ${4:newValue};\n\t},\n\tenumerable: ${6:false},\n\tconfigurable: ${7:false}\n})"],"description":"Object.defineProperties(obj, props)\naccessor descriptors\ndefines new or modifies existing properties directly on an object, \nreturning the object.\n"},"Object.defineProperties":{"prefix":"odps","body":["Object.defineProperties(${1:dest}, {\n\t${2:propertyName}: {\n\t\tconfigurable: ${3:false},\n\t\tenumerable: ${4:false}\n\t\tvalue: ${5:undefined},\n\t\twritable: ${6:false}\n\t},\n\t${7:propertyName}: {\n\t\tget() {\n\t\t\treturn ${8:value};\n\t\t},\n\t\tset(${9:newValue}) {\n\t\t\t${10:value} = ${9:newValue};\n\t\t}\n\t\tenumerable: ${11:false},\n\t\tconfigurable: ${12:false}\n\t}\n});"],"description":"Object.defineProperties(obj, props)\ndefines new or modifies existing properties directly on an object, \nreturning the object.\n"},"Object.freeze":{"prefix":"of","body":["Object.freeze(${1:obj});"],"description":"Object.freeze(obj);\nreturn the same object that was passed in.\n"},"Object.fromEntries":{"prefix":"ofe","body":["Object.fromEntries(${1:iterable});"],"description":"Object.fromEntries(iterable);\ntransforms a list of key-value pairs into an object.\n"},"Object.getOwnPropertyDescriptor":{"prefix":"ogopd","body":["Object.getOwnPropertyDescriptor(${1:obj}, '${2:propertyName}');"],"description":"Object.getOwnPropertyDescriptor(obj, propertyName);\nreturn a property descriptor of the given property if it exists on the object, 'undefined' otherwise.\n"},"Object.getOwnPropertyDescriptors":{"prefix":"ogopds","body":["Object.getOwnPropertyDescriptors(${1:obj});"],"description":"Object.getOwnPropertyDescriptors(obj);\nreturn an object containing all own property descriptors of an object. Might be an empty object, if there are no properties.\n"},"Object.getOwnPropertyNames":{"prefix":"ogopn","body":["Object.getOwnPropertyNames(${1:obj});"],"description":"Object.getOwnPropertyNames(obj);\nreturn an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.\n"},"Object.getOwnPropertySymbols":{"prefix":"ogops","body":["Object.getOwnPropertySymbols(${1:obj});"],"description":"Object.getOwnPropertySymbols(obj);\nreturn an array of all symbol properties found directly upon a given object.\n"},"Object.getPrototypeOf":{"prefix":"ogpo","body":["Object.getPrototypeOf(${1:obj});"],"description":"Object.getPrototypeOf(obj);\nreturn the prototype of the given object. If there are no inherited properties, 'null' is returned.\n"},"Object.is":{"prefix":"oi","body":["Object.is(${1:value1}, ${2:value2});"],"description":"Object.is(value1, value2);\ndetermines whether two values are the same value\n"},"Object.isExtensible":{"prefix":"oie","body":["Object.isExtensible(${1:obj})"],"description":"Object.isExtensible(obj);\ndetermines if an object is extensible (whether it can have new properties added to it).\n"},"Object.isFrozen":{"prefix":"oif","body":["Object.isFrozen(${1:obj})"],"description":"Object.isFrozen(obj);\ndetermines if an object is frozen.\n"},"Object.isSealed":{"prefix":"ois","body":["Object.isSealed(${1:obj})"],"description":"Object.isSealed(obj);\ndetermines if an object is sealed.\n"},"Object.preventExtensions":{"prefix":"ope","body":["Object.preventExtensions(${1:obj});"],"description":"Object.preventExtensions(obj);\nreturn the object being made non-extensible.\n"},"Object.seal":{"prefix":"os","body":["Object.seal(${1:obj});"],"description":"Object.seal(obj);\nseals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.\nreturn the object being sealed.\n"},"Object.setPrototypeOf":{"prefix":"ospo","body":["Object.setPrototypeOf(${1:obj}, ${2:prototype});"],"description":"Object.setPrototypeOf(obj, prototype);\nreturn the specified object.\n"},"Object.entries":{"prefix":"oe","body":["Object.entries(${1:obj});"],"description":"Object.entries(obj);\nreturn an array of a given object's own enumerable string-keyed property [key, value] pairs.\n"},"Object.keys":{"prefix":"ok","body":["Object.keys(${1:obj});"],"description":"Object.keys(obj);\nreturn an array of a given object's own property names, in the same order as we get with a normal loop.\n"},"Object.values":{"prefix":"ov","body":["Object.values(${1:obj});"],"description":"Object.values(obj);\nreturn an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).\n"},"*obj.hasOwnProperty":{"prefix":"hop","body":["${1:obj}.hasOwnProperty(${2:propertyName})"],"description":"obj.hasOwnProperty(propertyName);\nreturn a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).\n"},"*prototypeObj.isPrototypeOf":{"prefix":"ipo","body":["${1:prototypeObj}.isPrototypeOf(${2:object})"],"description":"prototypeObj.isPrototypeOf(object);\nreturn a Boolean indicating whether the calling object lies in the prototype chain of the specified object.\nthrown a TypeError is thrown if 'prototypeObj' is 'undefined' or 'null'.\n"},"*obj.propertyIsEnumerable":{"prefix":"pie","body":["${1:obj}.propertyIsEnumerable(${2:propertyName})"],"description":"obj.propertyIsEnumerable(propertyName);\nreturn a Boolean indicating whether the specified property is enumerable.\n"},"*obj.toLocaleString":{"prefix":"tls","body":["${1:obj}.toLocaleString();"],"description":"obj.toLocaleString();\n"},"*obj.toString":{"prefix":"ts","body":["${1:obj}.toString();"],"description":"obj.toString();\n"},"*obj.valueOf":{"prefix":"vo","body":["${1:obj}.valueOf();"],"description":"obj.valueOf();\n returns the primitive value of a **Objects** object\n"},"new Promise":{"prefix":"p","body":["const ${1:promise} = new Promise((resolve, reject) => {","\t${2}","});","","${1:promise}.then(${3:result} => {","\t${4}","}).catch(${5:error} => {","\t${6}","});",""],"description":"Promise\n"},"Promise.all":{"prefix":"pa","body":["Promise.all([${1:promise1}, ${2:promise2}]).then((${3:values}) => {","\tconsole.log(${3});","}).catch(error => {","\tconsole.error(error)","});"],"description":"Promise.all\n"},"Promise.any":{"prefix":"pa","body":["Promise.any([${1:promise1}, ${2:promise2}]).then((${3:result}) => {","\tconsole.log(${3});","}).catch(error => {","\tconsole.error(error)","});"],"description":"Promise.any\n"},"Promise.allSettled":{"prefix":"pas","body":["Promise.allSettled([${1:promise1}, ${2:promise2}]).then((${3:results}) => {","\t${3}.forEach((${4:result}) => {","\t\tconsole.log(${4}.status)","\t})","});"],"description":"Promise.allSettled\n"},"Promise.race":{"prefix":"pr","body":["Promise.race([${1:promise1}, ${2:promise2}]).then((${3:result}) => {","\tconsole.log(${3});","});"],"description":"Promise.race\n"},"Promise.reject":{"prefix":"prj","body":["Promise.reject(${1:reason});",""],"description":"Promise.reject\n"},"Promise.resolve":{"prefix":"prs","body":["Promise.resolve(${1:value});",""],"description":"Promise.resolve\n"},"reject":{"prefix":"rj","body":["reject(${1:err});",""],"description":"reject()\n"},"resolve":{"prefix":"rs","body":["resolve(${1:value});",""],"description":"resolve()\n"},"Promise.catch":{"prefix":"pc","body":["${1:promise}.catch(error => {","\t${2}","});",""],"description":"promise.catch\n"},"Promise.finally":{"prefix":"pf","body":["${1:promise}.finally(() => {","\t${2}","});",""],"description":"promise.finally\n"},"Promise.then":{"prefix":"pt","body":["${1:promise}.then(${2:result} => {","\t${3}","});",""],"description":"promise.then\n"},"Promise.then.catch":{"prefix":"ptc","body":["${1:promise}.then(${2:result} => {","\t${3}","}).catch(${4:error} => {","\t${5}","});"],"description":"promise.then.catch\n"},"Promise.then.catch.finally":{"prefix":"ptcf","body":["${1:promise}.then(${2:result} => {\n\t${3}\n}).catch(${4:error} => {\n\t${5}\n}).finally(() => {\n\t${6}\n});\n"],"description":"Promise.then.catch.finally\n"},"return promise":{"prefix":"rp","body":["return new Promise((resolve, reject) => {\n\t${1}\n})"],"description":"return a new Promise\n"},"proxy set":{"prefix":"proxy.set","body":["const proxy = new Proxy(${1:target}, {","\tset(trapTarget, key, value, receiver) {","\t\t// Overrides the Behavior Of Writing to a property","\t\t// if (!trapTarget.hasOwnProperty(key)) {\t}","\t\t${2}","\t\t// Default Behavior","\t\treturn Reflect.set(trapTarget, key, value, receiver);","\t}","});"],"description":"Validating Properties Using the set Trap\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#validating-properties-using-the-set-trap"},"proxy get":{"prefix":"proxy.get","body":["const proxy = new Proxy(${1:target}, {","\tget(trapTarget, key, receiver) {","\t\t// Overrides the Behavior Of Reading a property value","\t\t${2}","\t\t// Default Behavior","\t\treturn Reflect.get(trapTarget, key, receiver);","\t}","});"],"description":"Object Shape Validation Using the get Trap\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#object-shape-validation-using-the-get-trap"},"proxy has":{"prefix":"proxy.has","body":["const proxy = new Proxy(${1:target}, {","\thas(trapTarget, key) {","\t\t// Overrides the Behavior Of The 'in' operator","\t\t${2}","\t\t// Default Behavior","\t\treturn Reflect.has(trapTarget, key);","\t}","});"],"description":"Hiding Property Existence Using the has Trap\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#hiding-property-existence-using-the-has-trap"},"proxy delete":{"prefix":"proxy.delete","body":["const proxy = new Proxy(${1:target}, {","\tdeleteProperty(trapTarget, key) {","\t\t// Overrides the Behavior Of The 'delete' operator","\t\t${2}","\t\t// Default Behavior","\t\treturn Reflect.deleteProperty(trapTarget, key);","\t}","});"],"description":"Preventing Property Deletion with the deleteProperty Trap\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#preventing-property-deletion-with-the-deleteproperty-trap"},"proxy prototype":{"prefix":"proxy.prototype","body":["const proxy = new Proxy(${1:target}, {","\tgetPrototypeOf(trapTarget) {","\t\t// Overrides the Behavior Of 'Object.getPrototypeOf()'","\t\t${2}","\t\t// Default Behavior","\t\treturn Reflect.getPrototypeOf(trapTarget);","\t},","\t\tsetPrototypeOf(trapTarget, proto) {","\t\t// Overrides the Behavior Of 'Object.setPrototypeOf()'","\t\t${3}","\t\t// Default Behavior","\t\treturn Reflect.setPrototypeOf(trapTarget, proto);","\t}","});"],"description":"Prototype Proxy Traps\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#prototype-proxy-traps"},"proxy object extensibility":{"prefix":"proxy.extensibility","body":["const proxy = new Proxy(${1:target}, {","\tisExtensible(trapTarget) {","\t\t// Overrides the Behavior Of 'Object.isExtensible()'","\t\t${2}","\t\t// Default Behavior","\t\treturn Reflect.isExtensible(trapTarget);","\t},","\tpreventExtensions(trapTarget) {","\t\t// Overrides the Behavior Of 'Object.preventExtensions()'","\t\t${3}","\t\t// Default Behavior","\t\treturn Reflect.preventExtensions(trapTarget);","\t}","});"],"description":"Object Extensibility Traps\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#object-extensibility-traps"},"proxy object property descriptor ":{"prefix":"proxy.property","body":["const proxy = new Proxy(${1:target}, {","\tdefineProperty(trapTarget, key, descriptor) {","\t\t// Overrides the Behavior Of 'Object.defineProperty()'","\t\t${2}","\t\t// Default Behavior","\t\treturn Reflect.defineProperty(trapTarget, key, descriptor);","\t},","\tgetOwnPropertyDescriptor(trapTarget, key) {","\t\t// Overrides the Behavior Of 'Object.getOwnPropertyDescriptor()'","\t\t${3}","\t\t// Default Behavior","\t\treturn Reflect.getOwnPropertyDescriptor(trapTarget, key);","\t}","});"],"description":"Property Descriptor Traps\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#property-descriptor-traps"},"proxy ownKeys":{"prefix":"proxy.ownKeys","body":["const proxy = new Proxy(${1:target}, {","\townKeys(trapTarget) {","\t\t// Overrides the Behavior Of","\t\t// - 'Object.keys'","\t\t// - 'Object.getOwnPropertyNames()'","\t\t// - 'Object.getOwnPropertySymbols()'","\t\t${2}","\t\t// Default Behavior","\t\treturn Reflect.ownKeys(trapTarget);","\t}","});"],"description":"The ownKeys Trap\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#the-ownkeys-trap"},"proxy function":{"prefix":"proxy.function","body":["const proxy = new Proxy(${1:target}, {","\tapplay(trapTarget, thisArg, argumentsList) {","\t\t// Overrides the Behavior Of Calling a function","\t\t${2}","\t\t// Default Behavior","\t\treturn Reflect.applay(trapTarget, thisArg, argumentsList);","\t},","\tconstruct(trapTarget, argumentsList) {","\t\t// Overrides the Behavior Of Calling a function with new","\t\t${3}","\t\t// Default Behavior","\t\treturn Reflect.construct(trapTarget, argumentsList);","\t}","});"],"description":"Function Proxies with the apply and construct Traps\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#function-proxies-with-the-apply-and-construct-traps"},"Revocable Proxies":{"prefix":"proxy.revocable","body":["const { proxy, revoke } = Proxy.revocable(${1:target}, {})"],"description":"Revocable Proxies\nNicholas C. Zakas\nhttps://github.com/nzakas/understandinges6/blob/master/manuscript/12-Proxies-and-Reflection.md#revocable-proxies"},"RegExp(pattern[, flags])":{"prefix":"re","body":["const ${1:regex} = RegExp('${2:pattern}');"],"description":"RegExp(pattern[, flags])"},"/pattern/flags":{"prefix":"rep","body":["const ${1:regex} = /${2:pattern}/;"],"description":"/pattern/flags"},"regexObj.exec(str)":{"prefix":"ree","body":["const ${1:regex} = RegExp('${2:pattern}');\nconst ${3:result} = ${1:regex}.exec(${4:str});"],"description":"regexObj.exec(str)\nexecutes a search for a match in a specified string.\nreturn a result array, or **null**."},"regexObj.test(str)":{"prefix":"ret","body":["const ${1:regex} = RegExp('${2:pattern}');\nconst ${3:result} = ${1:regex}.test(${4:str});"],"description":"regexObj.test(str)\nexecutes a search for a match between a regular expression and a specified string. \nreturn **true** or **false**."},"if":{"prefix":"if","body":["if (${1:condition}) {\n\t${2}\n}"],"description":"if statement \n"},"if/else":{"prefix":"ife","body":["if (${1:condition}) {\n\t${2}\n} else {\n\t${3}\n}"],"description":"if/else statement \n"},"else if":{"prefix":"ei","body":["else if (${1:condition}) {\n\t${2}\n}"],"description":"else if statement \n"},"else":{"prefix":"el","body":["else {\n\t${1}\n}"],"description":"else statement \n"},"switch":{"prefix":"swi","body":["switch (${1:expression}) {\n\tcase '${2:value}':\n\t\t${3}\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}"],"description":"switch statement\n"},"case":{"prefix":"cas","body":["case ${1:value}:\n\t${2}\n\t\tbreak;"],"description":"switch's case statement \n"},"for-in":{"prefix":"fin","body":["for (let ${1:property} in ${2:object}) {\n\tif (${2:object}.hasOwnProperty(${1:property})) {\n\t\t${3}\n\t}\n}"],"description":"The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.\n"},"for-of":{"prefix":"fof","body":["for (let ${1:variable} of ${2:iterable}) {\n\t${3}\n}"],"description":"The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.\n"},"for loop iterable":{"prefix":["fl","fo","for"],"body":["for (let ${1:index} = 0, ${2:length} = ${3:iterable}.length; ${1:index} < ${2:length}; ${1:index} += 1) {\n\tconst element = ${3}[${1}];\n\t${4}\n}"],"description":"for loop iterable\n"},"for loop iterable(reverse)":{"prefix":["flr","forr"],"body":["for (let ${1:index} = ${2:iterable}.length - 1; ${1:index} >= 0; ${1:index} -= 1) {\n\tconst element = ${2}[${1}];\n\t${4}\n}"],"description":"reverse for loop iterable\n"},"while iteration":{"prefix":"wh","body":["while (${1:condition}) {\n\t${2}\n}"],"description":"while iteration\n"},"while iteration decrementing":{"prefix":"whi","body":["let ${1:iterable}Index = ${1:array}.length\nwhile (${1:iterableIndex}Index--) {\n\t${2}\n}"],"description":"while iteration decrementing\n"},"String.fromCharCode()":{"prefix":"sfcc","body":["String.fromCharCode(${1:numN})"],"description":"String.fromCharCode(num1[, ...[, numN]])\nreturn a string created from the specified sequence of UTF-16 code units.\n"},"String.fromCodePoint()":{"prefix":"sfcp","body":["String.fromCodePoint(${1:numN})"],"description":"String.fromCodePoint(num1[, ...[, numN]])\nreturn a string created by using the specified sequence of code points.\na RangeError is thrown if an invalid Unicode code point is given (e.g. 'RangeError: NaN is not a valid code point').\n"},"String.raw()":{"prefix":"sr","body":["String.raw`${1:templateString}`"],"description":"String.raw(callSite, ...substitutions)|String.raw`templateString`\nreturn the raw string form of a given template string.\n"},"str.charAt()":{"prefix":"sca","body":["${1:str}.charAt(${2:index})"],"description":"str.charAt(index)\n returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string.\n"},"str.charCodeAt()":{"prefix":"scca","body":["${1:str}.charCodeAt(${2:index})"],"description":"str.charCodeAt(index)\nreturn an integer between 0 and 65535 representing the UTF-16 code unit at the given index.\n"},"str.codePointAt()":{"prefix":"scpa","body":["${1:str}.codePointAt(${2:position})"],"description":"str.codePointAt(pos)\nreturn a non-negative integer that is the Unicode code point value.\n"},"str.concat()":{"prefix":"sc","body":["${1:str}.concat(${2:stringN})"],"description":"str.concat(string2[, string3, ..., stringN])\nreturn a new string containing the combined text of the strings provided.\n"},"str.endsWith()":{"prefix":"sew","body":["${1:str}.endsWith(${2:searchString})"],"description":"str.endsWith(searchString[, length])\nreturn 'true' if the given characters are found at the end of the string; otherwise, 'false'.\n"},"str.includes()":{"prefix":"sin","body":["${1:str}.includes(${2:searchString})"],"description":"str.includes(searchString[, position])\nreturn 'true' if the search string is found anywhere within the given string; otherwise, 'false' if not.\n"},"str.indexOf()":{"prefix":"sio","body":["${1:str}.indexOf(${2:searchValue})"],"description":"str.indexOf(searchValue[, fromIndex])\nreturn the index of the first occurrence of searchValue, or '-1' if not found.\nAn empty string searchValue will match at any index between '0' and str.length\n"},"str.lastIndexOf()":{"prefix":"slio","body":["${1:str}.lastIndexOf(${2:searchValue})"],"description":"str.lastIndexOf(searchValue[, fromIndex])\nreturn the index of the last occurrence of the specified value; '-1' if not found.\n"},"str.localeCompare()":{"prefix":"slc","body":["${1:str}.localeCompare(${2:compareString})"],"description":"referenceStr.localeCompare(compareString[, locales[, options]])\nreturn a **negative** number if the reference string occurs before the compare string; **positive** if the reference string occurs after the compare string; **0** if they are equivalent.\n"},"str.match()":{"prefix":"sm","body":["${1:str}.match(${2:regexp})"],"description":"str.match(regexp)\nreturn an **Array** whose contents depend on the presence or absence of the global (**g**) flag, or **null** if no matches are found.\n"},"str.matchAll()":{"prefix":"sma","body":["${1:str}.matchAll(${2:regexp})"],"description":"str.matchAll(regexp)\nreturn an iterator of all results matching a string against a regular expression, including capturing groups.\n"},"str.normalize()":{"prefix":"sn","body":["${1:str}.normalize('${2:NFC}')"],"description":"str.normalize([form])\n**form**\n- NFC â€” Normalization Form Canonical Composition.\n- NFD â€” Normalization Form Canonical Decomposition.\n- NFKC â€” Normalization Form Compatibility Composition.\n- NFKD â€” Normalization Form Compatibility Decomposition.\nreturn the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).\n thrown a **RangeError** is thrown if **form** isn't one of the values specified above.\n"},"str.padEnd()":{"prefix":"spe","body":["${1:str}.padEnd(${2:targetLength}, ${3:padString})"],"description":"str.padEnd(targetLength [, padString])\nreturn a **String** of the specified length with the pad string applied at the end of the current string.\n"},"str.padStart()":{"prefix":"sps","body":["${1:str}.padStart(${2:targetLength}, ${3:padString})"],"description":"str.padStart(targetLength [, padString])\nreturn a **String** of the specified length with the pad string applied from the start.\n"},"str.repeat()":{"prefix":"sr","body":["${1:str}.repeat(${2:count})"],"description":"str.repeat(count)\nreturn a new string containing the specified number of copies of the given string.\n"},"str.replace()":{"prefix":"sre","body":["${1:str}.replace(${2:regexp}, ${3:newSubStr})"],"description":"str.replace(regexp|substr, newSubStr|function)\nreturn a new string with some or all matches of a **pattern** replaced by a **replacement**. The **pattern** can be a string or a **RegExp**, and the **replacement** can be a string or a function to be called for each match. If **pattern** is a string, only the first occurrence will be replaced.\nThe original string is left unchanged.\n"},"str.search()":{"prefix":"ss","body":["${1:str}.search(${2:regexp})"],"description":"str.search(regexp)\nreturn the index of the first match between the regular expression and the given string; if not found, **-1**.\n"},"str.slice()":{"prefix":"ssl","body":["${1:str}.slice(${2:beginIndex}, ${3:endIndex})"],"description":"str.slice(beginIndex[, endIndex])\nreturn a new string containing the extracted section of the string.\n"},"str.split()":{"prefix":"ssp","body":["${1:str}.split(${2:separator})"],"description":"str.split([separator[, limit]])\nreturn an Array of strings split at each point where the separator occurs in the given string.\n"},"str.startsWith()":{"prefix":"ssw","body":["${1:str}.startsWith(${2:searchString}, ${3:position})"],"description":"str.startsWith(searchString[, position])\nreturn **true** if the given characters are found at the beginning of the string; otherwise, **false**.\n"},"str.substring()":{"prefix":"sss","body":["${1:str}.substring(${2:indexStart}, ${3:indexEnd})"],"description":"str.substring(indexStart[, indexEnd])\nreturn the part of the string between the start and end indexes, or to the end of the string.\n"},"str.toLocaleLowerCase()":{"prefix":"stllc","body":["${1:str}.toLocaleLowerCase()"],"description":"str.toLocaleLowerCase([locale, locale, ...])\nreturn a new string representing the calling string converted to lower case, according to any locale-specific case mappings.\n"},"str.toLocaleUpperCase()":{"prefix":"stluc","body":["${1:str}.toLocaleUpperCase()"],"description":"str.toLocaleUpperCase([locale, locale, ...])\nreturn a new string representing the calling string converted to upper case, according to any locale-specific case mappings.\n"},"str.toLowerCase()":{"prefix":"stlc","body":["${1:str}.toLowerCase()"],"description":"str.toLowerCase()\nreturn a new string representing the calling string converted to lower case.\n"},"str.toUpperCase()":{"prefix":"stuc","body":["${1:str}.toUpperCase()"],"description":"str.toUpperCase()\nreturn a new string representing the calling string converted to upper case.\n"},"str.trim()":{"prefix":"str","body":["${1:str}.trim()"],"description":"str.trim()\nreturn a new string representing the calling string stripped of whitespace from both ends.\n"},"str.trimEnd()":{"prefix":"ste","body":["${1:str}.trimEnd() //trimRight()"],"description":"str.trimEnd()/trimRight()\nreturn a new string representing the calling string stripped of whitespace from its (right) end.\n"},"str.trimStart()":{"prefix":"sts","body":["${1:str}.trimStart() //trimLeft()"],"description":"str.trimStart()/trimLeft()\nreturn a new string representing the calling string stripped of whitespace from its beginning (left end).\n"},"str[@@iterator]()":{"prefix":"ssi","body":["${1:str}[Symbol.iterator]"],"description":"str[Symbol.iterator]\nreturn a new **Iterator** object.\n"},"let Symbol":{"prefix":"lsy","body":["let ${1:symObj} = Symbol();"],"description":"let assignment Symbol"},"const Symbol":{"prefix":["csy","sym"],"body":["const ${1:symObj} = Symbol();"],"description":"const assignment Symbol"},"Symbol.for":{"prefix":"symf","body":["Symbol.for('${1:key}');"],"description":"The `Symbol.for(key)` method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key."},"Symbol.keyFor":{"prefix":"symk","body":["Symbol.keyFor('${1:symObj}');"],"description":"The `Symbol.keyFor(sym)` method retrieves a shared symbol key from the global symbol registry for the given symbol."},"test suite: describe":{"prefix":"desc","body":["describe('${1:description}', function () {\n\t${2}\n})"],"description":"test suite: describe\n"},"test suite: context":{"prefix":"cont","body":["context('${1:description}', ${2:callback});${0}"],"description":"test suite: context\n"},"test suite: it synchronous":{"prefix":"it","body":["it('${1:description}', () => {\n\t${2}\n})"],"description":"test suite: it synchronous\n"},"test suite: it asynchronous":{"prefix":"ita","body":["it('${1:description}', async (done) => {\n\t${2}\n\tdone();\n});${0}"],"description":"test suite: it asynchronous\n"},"test suite: afterEach":{"prefix":"afe","body":["afterEach(function () {\n\t${1}\n})"],"description":"test suite: afterEach\n"},"test suite: beforeEach":{"prefix":"bfe","body":["beforeEach(function () {\n\t${1}\n})"],"description":"test suite: beforeEach\n"},"test suite: after":{"prefix":"aft","body":["after(function () {\n\t${1}\n})"],"description":"test suite: after\n"},"test suite: before":{"prefix":"bf","body":["before(function () {\n\t${1}\n})"],"description":"test suite: before\n"}}